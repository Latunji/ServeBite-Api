Index: src/main/java/com/osm/gnl/ippms/ogsg/controllers/report/PayrollManagerReportSummaryFormExt.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.osm.gnl.ippms.ogsg.controllers.report;\r\n\r\nimport com.osm.gnl.ippms.ogsg.abstractentities.predicate.CustomPredicate;\r\nimport com.osm.gnl.ippms.ogsg.auth.domain.SessionManagerService;\r\nimport com.osm.gnl.ippms.ogsg.base.services.EmployeeService;\r\nimport com.osm.gnl.ippms.ogsg.base.services.HRService;\r\nimport com.osm.gnl.ippms.ogsg.base.services.PaycheckService;\r\nimport com.osm.gnl.ippms.ogsg.base.services.PayrollService;\r\nimport com.osm.gnl.ippms.ogsg.controllers.BaseController;\r\nimport com.osm.gnl.ippms.ogsg.controllers.report.service.BankService;\r\nimport com.osm.gnl.ippms.ogsg.controllers.report.service.SchoolService;\r\nimport com.osm.gnl.ippms.ogsg.controllers.report.utility.ExecutiveSummaryExcelGenerator;\r\nimport com.osm.gnl.ippms.ogsg.controllers.report.utility.ExecutiveSummaryPdfGenerator;\r\nimport com.osm.gnl.ippms.ogsg.controllers.report.utility.SimpleExcelReportGeneratorClass;\r\nimport com.osm.gnl.ippms.ogsg.controllers.report.utility.PdfSimpleGeneratorClass;\r\nimport com.osm.gnl.ippms.ogsg.domain.beans.MPBAMiniBean;\r\nimport com.osm.gnl.ippms.ogsg.domain.hr.MDAPMiniBeanHolder;\r\nimport com.osm.gnl.ippms.ogsg.domain.report.ReportGeneratorBean;\r\nimport com.osm.gnl.ippms.ogsg.domain.subvention.SubventionHistory;\r\nimport com.osm.gnl.ippms.ogsg.exception.EpmAuthenticationException;\r\nimport com.osm.gnl.ippms.ogsg.generic.domain.BusinessCertificate;\r\nimport com.osm.gnl.ippms.ogsg.organization.model.MdaDeptMap;\r\nimport com.osm.gnl.ippms.ogsg.organization.model.MdaInfo;\r\nimport com.osm.gnl.ippms.ogsg.organization.model.SchoolInfo;\r\nimport com.osm.gnl.ippms.ogsg.pagination.beans.PayrollSummaryBean;\r\nimport com.osm.gnl.ippms.ogsg.paycheck.domain.EmployeePayBean;\r\nimport com.osm.gnl.ippms.ogsg.paygroup.domain.SalaryInfo;\r\nimport com.osm.gnl.ippms.ogsg.payroll.domain.DevelopmentLevy;\r\nimport com.osm.gnl.ippms.ogsg.payroll.domain.PayrollRunMasterBean;\r\nimport com.osm.gnl.ippms.ogsg.payroll.utils.EntityUtils;\r\nimport com.osm.gnl.ippms.ogsg.payroll.utils.PayrollBeanUtils;\r\nimport com.osm.gnl.ippms.ogsg.payroll.utils.PayrollHRUtils;\r\nimport com.osm.gnl.ippms.ogsg.payroll.utils.PayrollUtils;\r\nimport com.osm.gnl.ippms.ogsg.report.beans.NamedEntityBean;\r\nimport com.osm.gnl.ippms.ogsg.report.beans.WageBeanContainer;\r\nimport com.osm.gnl.ippms.ogsg.report.beans.WageSummaryBean;\r\nimport com.osm.gnl.ippms.ogsg.domain.simulation.FuturePaycheckMaster;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.HttpSessionRequiredException;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.InvocationTargetException;\r\nimport java.time.LocalDate;\r\nimport java.util.*;\r\n\r\n@Controller\r\npublic class PayrollManagerReportSummaryFormExt extends BaseController\r\n{\r\n\r\n    /**\r\n     * Kasumu Taiwo\r\n     * 12-2020\r\n     */\r\n\r\n  @Autowired\r\n  BankService bankService;\r\n\r\n  @Autowired\r\n  SchoolService schoolService;\r\n\r\n  @Autowired\r\n  PaycheckService paycheckService;\r\n\r\n  @Autowired\r\n  EmployeeService employeeService;\r\n\r\n    @Autowired\r\n    PayrollService payrollService;\r\n\r\n  @Autowired\r\n  HRService hrService;\r\n\r\n  private HashMap<Long, WageSummaryBean> ministryMap;\r\n  private HashMap<Long, WageSummaryBean> subventionMap;\r\n  private HashMap<Long, SalaryInfo> salaryInfoMap;\r\n  private HashMap<Long, MdaInfo> mapAgencyMap;\r\n\r\n    private void init()  {\r\n        this.mapAgencyMap = new HashMap<>();\r\n        this.subventionMap = new HashMap<>();\r\n        this.ministryMap = new HashMap<>();\r\n        this.salaryInfoMap = new HashMap<>();\r\n    }\r\n\r\n  public PayrollManagerReportSummaryFormExt()\r\n  {}\r\n\r\n    private void makeAgencyHashMapFromList(List<MdaDeptMap> pList){\r\n        for (MdaDeptMap a : pList)\r\n            this.mapAgencyMap.put(a.getId(), a.getMdaInfo());\r\n    }\r\n\r\n\r\n  @RequestMapping({\"/compExecSummaryReportExcel.do\"})\r\n  public void setupForm(@RequestParam(\"sDate\") String fD, @RequestParam(\"eDate\") String tD, @RequestParam(\"ph\") int pInt, Model model, HttpServletResponse response, HttpServletRequest request) throws Exception\r\n  {\r\n\t  SessionManagerService.manageSession(request, model);\r\n\t  BusinessCertificate bc = super.getBusinessCertificate(request);\r\n\r\n    SimpleExcelReportGeneratorClass simpleExcelReportGeneratorClass = new SimpleExcelReportGeneratorClass();\r\n\r\n    LocalDate fDate = PayrollBeanUtils.setDateFromString(fD);\r\n    LocalDate tDate = PayrollBeanUtils.setDateFromString(tD);\r\n    init();\r\n    setControlMaps(request);\r\n\r\n    WageBeanContainer wBEOB = new WageBeanContainer();\r\n\r\n    wBEOB.setMonthAndYearStr(PayrollHRUtils.getMonthYearDateFormat().format(fDate));\r\n    List<WageSummaryBean> wRetList = new ArrayList<>();\r\n    HashMap<Integer, WageSummaryBean> wWorkBean = new HashMap<>();\r\n\r\n    List<EmployeePayBean> wEPBList = this.paycheckService.loadEmployeePayBeanByParentIdFromDateToDate(bc.getBusinessClientInstId(), fDate.getMonthValue(), tDate.getYear(), bc);\r\n    wBEOB.setTotalNoOfEmp(wEPBList.size());\r\n    WageSummaryBean wMinistryBean = new WageSummaryBean();\r\n    wMinistryBean.setAssignedToObject(\"Ministries\");\r\n    WageSummaryBean wAgencyBean = new WageSummaryBean();\r\n    wAgencyBean.setAssignedToObject(\"Agencies\");\r\n    WageSummaryBean wParastatals = new WageSummaryBean();\r\n    wParastatals.setAssignedToObject(\"Parastatals\");\r\n    WageSummaryBean wBoardBean = new WageSummaryBean();\r\n    wBoardBean.setAssignedToObject(\"Boards\");\r\n    WageSummaryBean wLGEABean = new WageSummaryBean();\r\n    wLGEABean.setAssignedToObject(\"TCO\");\r\n    WageSummaryBean wTCOBean = new WageSummaryBean();\r\n    wTCOBean.setAssignedToObject(\"TCO\");\r\n    wWorkBean.put(1, wAgencyBean);\r\n    wWorkBean.put(2, wBoardBean);\r\n    wWorkBean.put(3, wMinistryBean);\r\n    wWorkBean.put(4, wParastatals);\r\n    wWorkBean.put(5, wLGEABean);\r\n    wWorkBean.put(6, wTCOBean);\r\n\r\n    wBEOB.setTotalNoOfEmp(wEPBList.size());\r\n    HashMap<Long,Long> wAgencyMap = new HashMap<>();\r\n    WageSummaryBean wWSB = null;\r\n    for (EmployeePayBean e : wEPBList)\r\n    {\r\n\r\n\r\n        MdaInfo wAgency =this.mapAgencyMap.get(e.getMdaDeptMap().getId());\r\n\r\n        switch(wAgency.getMdaType().getMdaTypeCode()) {\r\n            case 1: //Agency\r\n                wAgencyBean = this.processWageBean(wAgencyBean,wAgency.getId(),wAgencyMap, e);\r\n                break;\r\n            case 2://Board\r\n                wBoardBean = this.processWageBean(wBoardBean,wAgency.getId(),wAgencyMap, e);\r\n                break;\r\n\r\n            case 3: // Ministry\r\n                wMinistryBean = this.processWageBean(wMinistryBean,wAgency.getId(),wAgencyMap, e);\r\n                break;\r\n            case 4:\r\n                wParastatals = this.processWageBean(wParastatals,wAgency.getId(),wAgencyMap, e);\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    wRetList.add(wAgencyBean);\r\n    wRetList.add(wBoardBean);\r\n    wRetList.add(wParastatals);\r\n    wRetList.add(wMinistryBean);\r\n\r\n        //transalating data to meet report generator requirement\r\n        List<Map<String, Object>> newCompExecSummary = new ArrayList<>();\r\n        for (WageSummaryBean data : wRetList){\r\n            Map<String, Object> newData = new HashMap<>();\r\n          newData.put(\"Department\", data.getAssignedToObject());\r\n          newData.put(\"No. Of Items\", data.getNoOfItems());\r\n          newData.put(\"No. Of Staff\", data.getNoOfEmp());\r\n          newData.put(\"Basic Salary\", data.getBasicSalary());\r\n          newData.put(\"Total Allowance\", data.getTotalAllowance());\r\n          newData.put(\"Gross Amount\", data.getGrossAmount());\r\n          newData.put(\"Paye\", data.getPaye());\r\n          newData.put(\"Other Deductions\", data.getOtherDeductions());\r\n          newData.put(\"Total Deduction\", data.getTotalDeductions());\r\n          newData.put(\"Net Pay\", data.getNetPay());\r\n          newCompExecSummary.add(newData);\r\n        }\r\n\r\n       //adding table headers\r\n      List<ReportGeneratorBean> headerList = new ArrayList<>();\r\n      headerList.add(new ReportGeneratorBean(\"Department\", 0));\r\n      headerList.add(new ReportGeneratorBean(\"No. Of Items\", 1));\r\n      headerList.add(new ReportGeneratorBean(\"No. Of Staff\", 1));\r\n      headerList.add(new ReportGeneratorBean(\"Basic Salary\", 2));\r\n      headerList.add(new ReportGeneratorBean(\"Total Allowance\", 2));\r\n      headerList.add(new ReportGeneratorBean(\"Gross Amount\", 2));\r\n      headerList.add(new ReportGeneratorBean(\"Paye\", 2));\r\n      headerList.add(new ReportGeneratorBean(\"Other Deductions\", 2));\r\n      headerList.add(new ReportGeneratorBean(\"Total Deduction\", 2));\r\n      headerList.add(new ReportGeneratorBean(\"Net Pay\", 2));\r\n\r\n      //translating table headers to meet report generator requirement\r\n      List<Map<String, Object>> mappedHeadersList = new ArrayList<>();\r\n      for(ReportGeneratorBean head : headerList){\r\n          Map<String, Object> mappedHeader = new HashMap<>();\r\n          mappedHeader.put(\"headerName\", head.getHeaderName());\r\n          mappedHeader.put(\"totalInd\", head.getTotalInd());\r\n          mappedHeadersList.add(mappedHeader);\r\n      }\r\n\r\n      //adding report headers\r\n      List<String> mainHeaders = new ArrayList<>();\r\n      mainHeaders.add(\"Ogun State Comprehensive Executive Payroll Report For: \"+wBEOB.getMonthAndYearStr());\r\n\r\n      //setting report bean\r\n      ReportGeneratorBean rt = new ReportGeneratorBean();\r\n      rt.setTableData(newCompExecSummary);\r\n      rt.setTableHeaders(mappedHeadersList);\r\n      rt.setBusinessCertificate(bc);\r\n      rt.setMainHeaders(mainHeaders);\r\n      rt.setTableType(0);\r\n      rt.setGroupBy(null);\r\n      rt.setSubGroupBy(null);\r\n      rt.setReportTitle(\"ComprehensiveExecSummaryReport\");\r\n      rt.setTotalInd(1);\r\n\r\n      simpleExcelReportGeneratorClass.getExcel(response, request, rt);\r\n  }\r\n\r\n\r\n\r\n    private WageSummaryBean processWageBean(WageSummaryBean pSummaryBean, Long wAgencyId, HashMap<Long,Long> wAgencyMap, EmployeePayBean e ) {\r\n\r\n        if (!wAgencyMap.containsKey(wAgencyId))\r\n        {\r\n\r\n            pSummaryBean.setNoOfItems(pSummaryBean.getNoOfItems() + 1);\r\n            wAgencyMap.put(wAgencyId, wAgencyId);\r\n        }\r\n        pSummaryBean.setNoOfEmp(pSummaryBean.getNoOfEmp() + 1);\r\n        SalaryInfo s = this.salaryInfoMap.get(e.getSalaryInfo().getId());\r\n        pSummaryBean.setBasicSalary(pSummaryBean.getBasicSalary() + EntityUtils.convertDoubleToEpmStandard(s.getMonthlyBasicSalary() / 12.0D));\r\n\r\n        double otherAllowance = e.getPrincipalAllowance() + e.getOtherArrears() + e.getArrears() + e.getSpecialAllowance();\r\n\r\n        double wSalaryDiffAsDeduction = 0.0D;\r\n        if (e.getSalaryDifference() > 0.0D)\r\n            otherAllowance += e.getSalaryDifference();\r\n        else {\r\n            wSalaryDiffAsDeduction = e.getSalaryDifference() * -1.0D;\r\n        }\r\n        pSummaryBean.setTotalAllowance(pSummaryBean.getTotalAllowance() + otherAllowance + e.getLeaveTransportGrant() + EntityUtils.convertDoubleToEpmStandard(s.getConsolidatedAllowance() / 12.0D));\r\n        pSummaryBean.setGrossAmount(pSummaryBean.getGrossAmount() + (s.getMonthlyBasicSalary() / 12.0D + otherAllowance + e.getLeaveTransportGrant() + EntityUtils.convertDoubleToEpmStandard(s.getConsolidatedAllowance() / 12.0D)));\r\n        pSummaryBean.setPaye(pSummaryBean.getPaye() + e.getTaxesPaid());\r\n        double otherDeductions = e.getNhf() + e.getUnionDues() + e.getTws() + e.getTotalDeductions() + e.getTotalGarnishments() + wSalaryDiffAsDeduction + e.getDevelopmentLevy();\r\n        pSummaryBean.setOtherDeductions(pSummaryBean.getOtherDeductions() + otherDeductions);\r\n        pSummaryBean.setTotalDeductions(pSummaryBean.getTotalDeductions() + (e.getTaxesPaid() + otherDeductions));\r\n        pSummaryBean.setNetPay(pSummaryBean.getNetPay() + e.getNetPay());\r\n\r\n\r\n        return pSummaryBean;\r\n    }\r\n\r\n\r\n    @RequestMapping({\"/compExecSummaryReportByMDAExcel.do\"})\r\n    public void generateCompExecSummaryExcelByMda(@RequestParam(\"sDate\") String fD, @RequestParam(\"eDate\") String tD, @RequestParam(\"ph\") int pInt,\r\n                                                  Model model, HttpServletRequest request, HttpServletResponse response) throws HttpSessionRequiredException, EpmAuthenticationException, EpmAuthenticationException, HttpSessionRequiredException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, IOException {\r\n\r\n        SessionManagerService.manageSession(request, model);\r\n\r\n        SimpleExcelReportGeneratorClass simpleExcelReportGeneratorClass = new SimpleExcelReportGeneratorClass();\r\n\r\n        BusinessCertificate bc = super.getBusinessCertificate(request);\r\n        init();\r\n\r\n        LocalDate fDate = PayrollBeanUtils.setDateFromString(fD);\r\n        LocalDate tDate = PayrollBeanUtils.setDateFromString(tD);\r\n\r\n        setControlMaps(request);\r\n\r\n        WageBeanContainer wBEOB = new WageBeanContainer();\r\n\r\n        wBEOB.setMonthAndYearStr(PayrollHRUtils.getMonthYearDateFormat().format(fDate));\r\n        List<WageSummaryBean> wRetList = new ArrayList<WageSummaryBean>();\r\n\r\n        List<EmployeePayBean> wEPBList = this.paycheckService.loadEmployeePayBeanByParentIdFromDateToDate(bc.getBusinessClientInstId(), fDate.getMonthValue(), tDate.getYear(), bc);\r\n        wBEOB.setTotalNoOfEmp(wEPBList.size());\r\n\r\n        HashMap<Long,WageSummaryBean> wAgencyMap = new HashMap<Long,WageSummaryBean>();\r\n\r\n\r\n        for (EmployeePayBean e : wEPBList)\r\n        {\r\n            WageSummaryBean wWSB = (WageSummaryBean)wAgencyMap.get(e.getMdaDeptMap().getMdaInfo().getId());\r\n            if (wWSB == null)\r\n            {\r\n                wWSB = new WageSummaryBean();\r\n\r\n                wWSB.setAssignedToObject(e.getMdaDeptMap().getMdaInfo().getName().toUpperCase());\r\n            }\r\n\r\n            wWSB.setNoOfItems(wWSB.getNoOfItems() + 1);\r\n            SalaryInfo s = (SalaryInfo)this.salaryInfoMap.get(e.getSalaryInfo().getId());\r\n            wWSB.setBasicSalary(wWSB.getBasicSalary() + EntityUtils.convertDoubleToEpmStandard(s.getMonthlyBasicSalary() / 12.0D));\r\n            double otherAllowance = e.getPrincipalAllowance() + e.getOtherArrears() + e.getArrears() + e.getSpecialAllowance();\r\n            double wSalaryDiffAsDeduction = 0.0D;\r\n            if (e.getSalaryDifference() > 0.0D)\r\n                otherAllowance += e.getSalaryDifference();\r\n            else {\r\n                wSalaryDiffAsDeduction = e.getSalaryDifference() * -1.0D;\r\n            }\r\n            wWSB.setTotalAllowance(wWSB.getTotalAllowance() + otherAllowance + e.getLeaveTransportGrant() +EntityUtils.convertDoubleToEpmStandard(s.getConsolidatedAllowance() / 12.0D));\r\n            wWSB.setGrossAmount(wWSB.getGrossAmount() + (EntityUtils.convertDoubleToEpmStandard(s.getMonthlyBasicSalary() / 12.0D) + otherAllowance + e.getLeaveTransportGrant() + EntityUtils.convertDoubleToEpmStandard(s.getConsolidatedAllowance() / 12.0D)));\r\n            wWSB.setPaye(wWSB.getPaye() + e.getTaxesPaid());\r\n            double otherDeductions = e.getNhf() + e.getUnionDues() + e.getTws() + e.getTotalDeductions() + e.getTotalGarnishments() + wSalaryDiffAsDeduction + e.getDevelopmentLevy();\r\n            wWSB.setOtherDeductions(wWSB.getOtherDeductions() + otherDeductions);\r\n            wWSB.setTotalDeductions(wWSB.getTotalDeductions() + (e.getTaxesPaid() + otherDeductions));\r\n            wWSB.setNetPay(wWSB.getNetPay() + e.getNetPay());\r\n            wAgencyMap.put(e.getMdaDeptMap().getMdaInfo().getId(), wWSB);\r\n\r\n\r\n        }\r\n\r\n        wRetList = getWageSummaryBeanFromMap(wAgencyMap, wRetList, true);\r\n\r\n        List<Map<String, Object>> newCompExecSummary = new ArrayList<>();\r\n        for (WageSummaryBean data : wRetList){\r\n            Map<String, Object> newData = new HashMap<>();\r\n            newData.put(bc.getMdaTitle(), data.getAssignedToObject());\r\n            newData.put(\"No. Of Staff\", data.getNoOfItems());\r\n            newData.put(\"Basic Salary\", data.getBasicSalary());\r\n            newData.put(\"Total Allowance\", data.getTotalAllowance());\r\n            newData.put(\"Gross Amount\", data.getGrossAmount());\r\n            newData.put(\"Paye\", data.getPaye());\r\n            newData.put(\"Other Deductions\", data.getOtherDeductions());\r\n            newData.put(\"Total Deduction\", data.getTotalDeductions());\r\n            newData.put(\"Net Pay\", data.getNetPay());\r\n            newCompExecSummary.add(newData);\r\n        }\r\n\r\n        //adding table headers\r\n        List<ReportGeneratorBean> headerList = new ArrayList<>();\r\n        headerList.add(new ReportGeneratorBean(bc.getMdaTitle(), 0));\r\n        headerList.add(new ReportGeneratorBean(\"No. Of Staff\", 1));\r\n        headerList.add(new ReportGeneratorBean(\"Basic Salary\", 2));\r\n        headerList.add(new ReportGeneratorBean(\"Total Allowance\", 2));\r\n        headerList.add(new ReportGeneratorBean(\"Gross Amount\", 2));\r\n        headerList.add(new ReportGeneratorBean(\"Paye\", 2));\r\n        headerList.add(new ReportGeneratorBean(\"Other Deductions\", 2));\r\n        headerList.add(new ReportGeneratorBean(\"Total Deduction\", 2));\r\n        headerList.add(new ReportGeneratorBean(\"Net Pay\", 2));\r\n\r\n        //translating table headers to meet report generator requirement\r\n        List<Map<String, Object>> mappedHeadersList = new ArrayList<>();\r\n        for(ReportGeneratorBean head : headerList){\r\n            Map<String, Object> mappedHeader = new HashMap<>();\r\n            mappedHeader.put(\"headerName\", head.getHeaderName());\r\n            mappedHeader.put(\"totalInd\", head.getTotalInd());\r\n            mappedHeadersList.add(mappedHeader);\r\n        }\r\n\r\n        //adding report headers\r\n        List<String> mainHeaders = new ArrayList<>();\r\n        mainHeaders.add(\"Ogun State Comprehensive Executive Payroll Report For: \"+wBEOB.getMonthAndYearStr());\r\n\r\n        //setting report bean\r\n        ReportGeneratorBean rt = new ReportGeneratorBean();\r\n        rt.setTableData(newCompExecSummary);\r\n        rt.setTableHeaders(mappedHeadersList);\r\n        rt.setBusinessCertificate(bc);\r\n        rt.setMainHeaders(mainHeaders);\r\n        rt.setTableType(0);\r\n        rt.setGroupBy(null);\r\n        rt.setSubGroupBy(null);\r\n        rt.setReportTitle(\"ComprehensiveExecSummaryReport\");\r\n        rt.setTotalInd(1);\r\n\r\n        simpleExcelReportGeneratorClass.getExcel(response, request, rt);\r\n    }\r\n\r\n\r\n\r\n    private void setControlMaps(HttpServletRequest request) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {\r\n\r\n        BusinessCertificate bc = super.getBusinessCertificate(request);\r\n\r\n        \r\n//\tList<MdaDeptMap> wAgencyList = (List<MdaDeptMap>) this.payrollService.loadAllByHqlStr(\"from MdaDeptMap\");\r\n        List<MdaDeptMap> wAgencyList = this.genericService.loadAllObjectsWithSingleCondition(MdaDeptMap.class,\r\n                new CustomPredicate(\"businessClientId\",bc.getBusinessClientInstId()),null);\r\n\r\n\r\n        makeAgencyHashMapFromList(wAgencyList);\r\n\r\n//    this.salaryInfoMap = this.payrollServiceExt.loadSalaryInfoAsMap();\r\n        this.salaryInfoMap = this.genericService.loadObjectAsMapWithConditions(SalaryInfo.class, Arrays.asList(\r\n                new CustomPredicate(\"businessClientId\",bc.getBusinessClientInstId())), \"id\");\r\n    }\r\n\r\n\r\n    @RequestMapping({\"/payrollSummaryByMDAPExcel.do\"})\r\n    public void generateExcutivePayrollSummary(@RequestParam(\"rm\") int pRunMonth, @RequestParam(\"ry\") int pRunYear,\r\n                                               @RequestParam(\"rt\") int ReportType, Model model,\r\n                                               HttpServletResponse response, HttpServletRequest request) throws Exception\r\n    {\r\n        SessionManagerService.manageSession(request, model);\r\n        BusinessCertificate bc = super.getBusinessCertificate(request);\r\n\r\n        ExecutiveSummaryExcelGenerator executiveSummaryExcelGenerator = new ExecutiveSummaryExcelGenerator();\r\n\r\n        ExecutiveSummaryPdfGenerator executiveSummaryPdfGenerator = new ExecutiveSummaryPdfGenerator();\r\n\r\n        LocalDate fDate = PayrollBeanUtils.getDateFromMonthAndYear(pRunMonth, pRunYear);\r\n        //Calendar tDate = PayrollBeanUtils.setDateFromString(tD);\r\n\r\n        LocalDate wPrevMonthStart = PayrollBeanUtils.getPreviousMonthDate(fDate, false);\r\n        LocalDate wPrevMonthEnd = PayrollBeanUtils.getPreviousMonthDate(fDate, true);\r\n        init();\r\n        setControlMaps(request);\r\n\r\n        WageBeanContainer wBEOB = new WageBeanContainer();\r\n\r\n        LocalDate wCheckDate;\r\n        wCheckDate = wPrevMonthEnd;\r\n\r\n        if (PayrollBeanUtils.isUnionDuesDeducted(wCheckDate))\r\n            wBEOB.setShowUnionDues(true);\r\n        else {\r\n            wBEOB.setShowUnionDues(false);\r\n        }\r\n\r\n        wBEOB.setMonthAndYearStr(PayrollHRUtils.getMiniMonthYearDateFormat().format(fDate));\r\n        wBEOB.setPrevMonthAndYearStr(PayrollHRUtils.getMiniMonthYearDateFormat().format(wPrevMonthStart));\r\n\r\n        double wTotalCurrPay = 0.0D;\r\n        double wTotalPrevPay = 0.0D;\r\n        int serialNum = 0;\r\n        WageSummaryBean wTotalDeductions = new WageSummaryBean();\r\n        wTotalDeductions.setName(\"Other Deductions\");\r\n        WageSummaryBean wTotalLoans = new WageSummaryBean();\r\n        wTotalLoans.setName(\"Total Loans\");\r\n        WageSummaryBean wPayee = new WageSummaryBean();\r\n        wPayee.setName(\"Total Taxes\");\r\n        WageSummaryBean wPensions = new WageSummaryBean();\r\n        wPensions.setName(\"Contributory Pensions (Employee)\");\r\n\r\n        WageSummaryBean wPensionsEmployer = new WageSummaryBean();\r\n        wPensionsEmployer.setName(\"Contributory Pensions (Employer)\");\r\n\r\n        WageSummaryBean wRBA = new WageSummaryBean();\r\n//        PayrollRunMasterBean wPRMB = payrollService.loadObjectByMonthAndYear(PayrollRunMasterBean.class, \"runMonth\",pRunMonth,\"runYear\",pRunYear);\r\n\r\n        PayrollRunMasterBean wPRMB = this.genericService.loadObjectUsingRestriction(PayrollRunMasterBean.class,  Arrays.asList(getBusinessClientPredicate(request),\r\n                new CustomPredicate(\"runMonth\",pRunMonth), new CustomPredicate(\"runYear\",pRunYear)));\r\n\r\n        wRBA.setName(\"Redemption Bond Account ( \"+wPRMB.getRbaPercentageStr()+\" Gross Pay)\");\r\n\r\n\r\n        boolean wDevLevyDeducted = false;\r\n\r\n        LocalDate wCal = null;\r\n        wCal = wPrevMonthEnd;\r\n\r\n        PayrollRunMasterBean wPRMBPrev = this.genericService.loadObjectUsingRestriction(PayrollRunMasterBean.class, Arrays.asList(getBusinessClientPredicate(request),\r\n                new CustomPredicate(\"runMonth\",wCal.getMonthValue()), new CustomPredicate(\"runYear\",wCal.getYear())));\r\n\r\n\r\n        DevelopmentLevy wDLI = this.genericService.loadObjectUsingRestriction(DevelopmentLevy.class, Arrays.asList(new CustomPredicate(\"year\", fDate.getYear() ),getBusinessClientPredicate(request)));\r\n\r\n        if (wDLI.isNewEntity())\r\n        {\r\n            if (wCal.getYear() != fDate.getYear())\r\n            {\r\n                wDLI =  this.genericService.loadObjectUsingRestriction(DevelopmentLevy.class, Arrays.asList(new CustomPredicate(\"year\", wCal.getYear() ),getBusinessClientPredicate(request)));\r\n                if (!wDLI.isNewEntity())\r\n                {\r\n                    if (wDLI.getMonth() == wCal.getMonthValue())\r\n                        wDevLevyDeducted = true;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if (wDLI.getMonth() == fDate.getMonthValue()) {\r\n                wDevLevyDeducted = true;\r\n            }\r\n\r\n            wDLI =  this.genericService.loadObjectUsingRestriction(DevelopmentLevy.class, Arrays.asList(new CustomPredicate(\"year\", wCal.getYear() ),getBusinessClientPredicate(request)));\r\n            if (!wDLI.isNewEntity())\r\n            {\r\n                if (wDLI.getMonth()== wCal.getMonthValue()) {\r\n                    wDevLevyDeducted = true;\r\n                }\r\n            }\r\n        }\r\n        WageSummaryBean wDevLevy = null;\r\n        if (wDevLevyDeducted)\r\n        {\r\n            wDevLevy = new WageSummaryBean();\r\n            wDevLevy.setName(\"Development Levy\");\r\n        }\r\n        List<EmployeePayBean> wEPBList = this.paycheckService.loadEmployeePayBeanByParentIdFromDateToDate(bc.getBusinessClientInstId(),fDate.getMonthValue(),fDate.getYear(), bc);\r\n        wBEOB.setTotalNoOfEmp(wEPBList.size());\r\n        HashMap<Long,Double> wDeductionMap = this.employeeService.loadDeductionsForActiveEmployees(fDate, bc);\r\n        for (EmployeePayBean e : wEPBList)\r\n        {\r\n            wPayee.setCurrentBalance(wPayee.getCurrentBalance() + e.getTaxesPaid());\r\n\r\n            double totalDeductions = 0.0D;\r\n            if (wDeductionMap.containsKey(e.getEmployee().getId())) {\r\n                totalDeductions = wDeductionMap.get(e.getEmployee().getId()).doubleValue();\r\n                wTotalDeductions.setCurrentBalance(wTotalDeductions.getCurrentBalance() + totalDeductions);\r\n            }\r\n            wTotalLoans.setCurrentBalance(wTotalLoans.getCurrentBalance() + e.getTotalGarnishments());\r\n            wPensions.setCurrentBalance(wPensions.getCurrentBalance() + e.getContributoryPension());\r\n            wPensionsEmployer.setCurrentBalance(wPensionsEmployer.getCurrentBalance() + e.getContributoryPension());\r\n            if ((wDevLevyDeducted) && (e.getDevelopmentLevy() > 0.0D)) {\r\n                wDevLevy.setCurrentBalance(wDevLevy.getCurrentBalance() + e.getDevelopmentLevy());\r\n            }\r\n            if (bc.getStaffTypeName().equals(\"Pensioner\")) {\r\n            wBEOB.setTotalDedBal(wBEOB.getTotalDedBal() + e.getTotalGarnishments() + e.getTaxesPaid() + totalDeductions + e.getDevelopmentLevy());\r\n            }\r\n            else{\r\n                wBEOB.setTotalDedBal(wBEOB.getTotalDedBal() + e.getTotalGarnishments() + e.getTaxesPaid() + totalDeductions + e.getDevelopmentLevy() + e.getContributoryPension());\r\n            }\r\n            wTotalCurrPay += e.getTotalPay();\r\n            WageSummaryBean wWSB = null;\r\n\r\n\r\n                if (this.ministryMap.containsKey(e.getMdaDeptMap().getMdaInfo().getId())) {\r\n                    wWSB = this.ministryMap.get(e.getMdaDeptMap().getMdaInfo().getId());\r\n                }else{\r\n                    wWSB = new WageSummaryBean();\r\n                    wWSB.setAssignedToObject(e.getMdaDeptMap().getMdaInfo().getName());\r\n                }\r\n\r\n                wWSB.setCurrentBalance(wWSB.getCurrentBalance() + e.getTotalPay());\r\n                wWSB.setNoOfEmp(wWSB.getNoOfEmp() + 1);\r\n                this.ministryMap.put(e.getMdaDeptMap().getMdaInfo().getId(), wWSB);\r\n\r\n\r\n        }\r\n\r\n        List<EmployeePayBean> wEPBListOld = this.paycheckService.loadEmployeePayBeanByParentIdFromDateToDate(bc.getBusinessClientInstId(), wCal.getMonthValue(), wCal.getYear(), bc);\r\n        wBEOB.setTotalNoOfPrevMonthEmp(wEPBListOld.size());\r\n        wDeductionMap = this.employeeService.loadDeductionsForActiveEmployees(wCheckDate, bc);\r\n        for (EmployeePayBean e : wEPBListOld)\r\n        {\r\n\r\n            wTotalPrevPay += e.getTotalPay();\r\n            wPayee.setPreviousBalance(wPayee.getPreviousBalance() + e.getTaxesPaid());\r\n\r\n            double deductionAmount = 0.0D;\r\n            if (wDeductionMap.containsKey(e.getEmployee().getId())) {\r\n                deductionAmount = wDeductionMap.get(e.getEmployee().getId()).doubleValue();\r\n                wTotalDeductions.setPreviousBalance(wTotalDeductions.getPreviousBalance() + deductionAmount);\r\n            }\r\n            wTotalLoans.setPreviousBalance(wTotalLoans.getPreviousBalance() + e.getTotalGarnishments());\r\n            wPensions.setPreviousBalance(wPensions.getPreviousBalance() + e.getContributoryPension());\r\n            wPensionsEmployer.setPreviousBalance(wPensionsEmployer.getPreviousBalance() + e.getContributoryPension());\r\n            if ((wDevLevyDeducted) && (e.getDevelopmentLevy() > 0.0D)) {\r\n                wDevLevy.setPreviousBalance(wDevLevy.getPreviousBalance() + e.getDevelopmentLevy());\r\n            }\r\n\r\n            if (bc.getStaffTypeName().equals(\"Pensioner\")){\r\n            wBEOB.setTotalPrevDedBal(wBEOB.getTotalPrevDedBal() + deductionAmount + e.getTotalGarnishments() + e.getTaxesPaid() + e.getDevelopmentLevy());\r\n            }\r\n            else{\r\n                wBEOB.setTotalPrevDedBal(wBEOB.getTotalPrevDedBal() + deductionAmount + e.getTotalGarnishments() + e.getTaxesPaid() + e.getDevelopmentLevy() + e.getContributoryPension());\r\n            }\r\n            WageSummaryBean wWSB = null;\r\n\r\n\r\n                if (this.ministryMap.containsKey(e.getMdaDeptMap().getMdaInfo().getId())) {\r\n                    wWSB = this.ministryMap.get(e.getMdaDeptMap().getMdaInfo().getId());\r\n\r\n                }else {\r\n                    wWSB = new WageSummaryBean();\r\n                    wWSB.setAssignedToObject(e.getMdaDeptMap().getMdaInfo().getName());\r\n                }\r\n                serialNum++;\r\n                wWSB.setSerialNum(serialNum);\r\n\r\n\r\n\r\n\r\n            wWSB.setPreviousNoOfEmp(wWSB.getPreviousNoOfEmp() + 1);\r\n            wWSB.setPreviousBalance(wWSB.getPreviousBalance() + e.getTotalPay());\r\n            this.ministryMap.put(e.getMdaDeptMap().getMdaInfo().getId(), wWSB);\r\n\r\n\r\n        }\r\n\r\n        wEPBListOld = null;\r\n        List<WageSummaryBean> wRetList = new ArrayList<WageSummaryBean>();\r\n\r\n\r\n            wRetList = getWageSummaryBeanFromMap(this.ministryMap, wRetList, true);\r\n\r\n\r\n        wBEOB.setTotalCurrBal(wTotalCurrPay);\r\n        wBEOB.setTotalPrevBal(wTotalPrevPay);\r\n\r\n        // GregorianCalendar wBegin = new GregorianCalendar();\r\n        LocalDate wEnd;\r\n        //wBegin.setTime(wPrevMonthStart);\r\n        wEnd = wPrevMonthEnd;\r\n    /*GregorianCalendar wCurrMonthEnd = new GregorianCalendar();\r\n    wCurrMonthEnd.setTime(fDate.getTime());*/\r\n        List<SubventionHistory> wSubHistoryList = this.genericService.loadAllObjectsUsingRestrictions(SubventionHistory.class, Arrays.asList(new CustomPredicate(\"subvention.businessClient.id\", bc.getBusinessClientInstId()),\r\n                new CustomPredicate(\"runMonth\", fDate.getMonthValue()), new CustomPredicate( \"runYear\", fDate.getYear())), \"id\");\r\n\r\n        for (SubventionHistory s : wSubHistoryList) {\r\n            WageSummaryBean wWSB = new WageSummaryBean();\r\n            wWSB.setSubvention(true);\r\n            wWSB.setDisplayStyle(\"reportOdd\");\r\n            serialNum++; wWSB.setSerialNum(serialNum);\r\n            wWSB.setName(s.getSubvention().getName());\r\n            wWSB.setCurrentBalance(s.getAmount());\r\n            wBEOB.setTotalSubBal(wBEOB.getTotalSubBal() + s.getAmount());\r\n\r\n            this.subventionMap.put(s.getSubvention().getId(), wWSB);\r\n        }\r\n        wSubHistoryList = null;\r\n        wSubHistoryList = this.genericService.loadAllObjectsUsingRestrictions(SubventionHistory.class, Arrays.asList(new CustomPredicate(\"subvention.businessClient.id\", bc.getBusinessClientInstId()),\r\n                new CustomPredicate(\"runMonth\", wEnd.getMonthValue()), new CustomPredicate(\"runYear\", wEnd.getYear())), \"id\");\r\n        if (wSubHistoryList != null) {\r\n            for (SubventionHistory s : wSubHistoryList)\r\n            {\r\n                WageSummaryBean wWSB = (WageSummaryBean)this.subventionMap.get(s.getSubvention().getId());\r\n\r\n                if (wWSB == null) {\r\n                    wWSB = new WageSummaryBean();\r\n                    wWSB.setDisplayStyle(\"reportOdd\");\r\n                    serialNum++; wWSB.setSerialNum(serialNum);\r\n                    wWSB.setName(s.getSubvention().getName());\r\n                }\r\n\r\n                if (!wWSB.isSubvention()) {\r\n                    wWSB.setSubvention(true);\r\n                }\r\n\r\n                if (wBEOB.getTotalPrevBal() > 0.0D) {\r\n                    wWSB.setPreviousBalance(s.getAmount());\r\n                    wBEOB.setTotalPrevSubBal(wBEOB.getTotalPrevSubBal() + s.getAmount());\r\n                }\r\n                else {\r\n                    wBEOB.setTotalPrevSubBal(wBEOB.getTotalPrevSubBal() + 0.0D);\r\n                }\r\n\r\n                this.subventionMap.put(s.getSubvention().getId(), wWSB);\r\n            }\r\n\r\n        }\r\n\r\n        if(!(bc.getStaffTypeName().equals(\"Pensioner\"))) {\r\n            List<WageSummaryBean> wSubventionList = new ArrayList<WageSummaryBean>();\r\n            try {\r\n                wSubventionList = getWageSummaryBeanFromMap(this.subventionMap, wSubventionList, false);\r\n            } catch (NullPointerException e) {\r\n                this.subventionMap = new HashMap<>();\r\n            }\r\n\r\n            Collections.sort(wSubventionList);\r\n            wBEOB.setSubventionList(wSubventionList);\r\n\r\n            List<WageSummaryBean> wContList = new ArrayList<WageSummaryBean>();\r\n            serialNum++;\r\n            wPensionsEmployer.setSerialNum(serialNum);\r\n            wRBA.setCurrentBalance(wBEOB.getTotalCurrBal() * (wPRMB.getRbaPercentage() / 100.0D));\r\n            wRBA.setPreviousBalance(wBEOB.getTotalPrevBal() * (wPRMBPrev.getRbaPercentage() / 100.0D));\r\n            serialNum++;\r\n            wRBA.setSerialNum(serialNum);\r\n            wContList.add(wPensionsEmployer);\r\n            wContList.add(wRBA);\r\n            wBEOB.setTotalCurrCont(wPensionsEmployer.getCurrentBalance() + wRBA.getCurrentBalance());\r\n            wBEOB.setTotalPrevCont(wPensionsEmployer.getPreviousBalance() + wRBA.getPreviousBalance());\r\n            Collections.sort(wContList);\r\n            wBEOB.setContributionList(wContList);\r\n        }\r\n\r\n        List<WageSummaryBean> wDedList = new ArrayList<WageSummaryBean>();\r\n        serialNum++; wPayee.setSerialNum(serialNum);\r\n        serialNum++; wTotalDeductions.setSerialNum(serialNum);\r\n\r\n        serialNum++; wTotalLoans.setSerialNum(serialNum);\r\n        if(!bc.isPensioner()) {\r\n            serialNum++;\r\n            wPensions.setSerialNum(serialNum);\r\n        }\r\n        if (wDevLevyDeducted) {\r\n            serialNum++; wDevLevy.setSerialNum(serialNum);\r\n        }\r\n\r\n        wDedList.add(wPayee);\r\n        wDedList.add(wTotalDeductions);\r\n\r\n        wDedList.add(wTotalLoans);\r\n        if(!bc.isPensioner()) {\r\n            wDedList.add(wPensions);\r\n        }\r\n        if (wDevLevyDeducted) {\r\n            wDedList.add(wDevLevy);\r\n        }\r\n\r\n        Collections.sort(wDedList);\r\n        wBEOB.setDeductionList(wDedList);\r\n\r\n        wBEOB.setGrandTotal(wBEOB.getTotalCurrBal() - wBEOB.getTotalDedBal());\r\n        wBEOB.setGrandPrevTotal(wBEOB.getTotalPrevBal() - wBEOB.getTotalPrevDedBal());\r\n        if(bc.isPensioner()) {\r\n            wBEOB.setTotalCurrOutGoing(wBEOB.getTotalCurrBal());\r\n            wBEOB.setTotalPrevOutGoing(wBEOB.getTotalPrevBal());\r\n        }\r\n        else {\r\n            wBEOB.setTotalCurrOutGoing(wBEOB.getTotalCurrBal() + wBEOB.getTotalSubBal() + wBEOB.getTotalCurrCont());\r\n            wBEOB.setTotalPrevOutGoing(wBEOB.getTotalPrevBal() + wBEOB.getTotalPrevSubBal() + wBEOB.getTotalPrevCont());\r\n        }\r\n        wBEOB.setRunMonth(pRunMonth);\r\n        wBEOB.setRunYear(pRunYear);\r\n        Collections.sort(wRetList);\r\n        wBEOB.setWageSummaryBeanList(wRetList);\r\n\r\n        if (ReportType == 1 ) {\r\n            executiveSummaryExcelGenerator.generateExcel(wBEOB, \"Ogun \"+bc.getBusinessName()+\" Executive \"+bc.getStaffTypeName()+\" Salary Summary By \"+bc.getMdaTitle(), response, request, getBusinessCertificate(request));\r\n        } else if (ReportType == 2 ){\r\n            executiveSummaryPdfGenerator.generatePdf(wBEOB, \"Ogun \"+bc.getBusinessName()+\" Executive \"+bc.getStaffTypeName()+\" Salary Summary By \"+bc.getMdaTitle(), response, request, getBusinessCertificate(request));\r\n        }\r\n\r\n    }\r\n\r\n    private List<WageSummaryBean> getWageSummaryBeanFromMap(HashMap<Long, WageSummaryBean> pObjectMap, List<WageSummaryBean> pRetList, boolean pSetDisplay)\r\n    {\r\n        Set<Map.Entry<Long,WageSummaryBean>> set = pObjectMap.entrySet();\r\n        Iterator<Map.Entry<Long, WageSummaryBean>> i = set.iterator();\r\n\r\n        while(i.hasNext()){\r\n            Map.Entry<Long,WageSummaryBean> me = i.next();\r\n\r\n            if (pSetDisplay) {\r\n                me.getValue().setDisplayStyle(\"reportOdd\");\r\n            }\r\n            if(me.getValue().isSubvention()){\r\n                if(me.getValue().getCurrentBalance() == 0 && me.getValue().getPreviousBalance() == 0)\r\n                    continue;\r\n                pRetList.add(me.getValue());\r\n\r\n            }else{\r\n                pRetList.add(me.getValue());\r\n            }\r\n\r\n\r\n        }\r\n\r\n        return pRetList;\r\n    }\r\n\r\n\r\n    @RequestMapping({\"/payrollAnalysisByMdaExcel.do\"})\r\n    public void setupForm(@RequestParam(\"rm\") int pRunMonth, @RequestParam(\"ry\") int pRunYear, @RequestParam(\"rt\") int reportType, Model model,\r\n                          HttpServletRequest request, HttpServletResponse response) throws HttpSessionRequiredException, EpmAuthenticationException, IOException {\r\n        SessionManagerService.manageSession(request, model);\r\n        BusinessCertificate bc = super.getBusinessCertificate(request);\r\n\r\n        SimpleExcelReportGeneratorClass simpleExcelReportGeneratorClass = new SimpleExcelReportGeneratorClass();\r\n\r\n        PdfSimpleGeneratorClass pdfSimpleGeneratorClass = new PdfSimpleGeneratorClass();\r\n\r\n        ReportGeneratorBean rt = new ReportGeneratorBean();\r\n\r\n        PayrollSummaryBean p = new PayrollSummaryBean();\r\n        LocalDate fromDate = PayrollBeanUtils.getDateFromMonthAndYear(pRunMonth, pRunYear);\r\n        LocalDate toDate = LocalDate.now();\r\n        toDate.of(fromDate.getYear(), fromDate.getMonthValue(), fromDate.lengthOfMonth());\r\n\r\n        HashMap<Long,SalaryInfo> wSIMap = new HashMap<Long,SalaryInfo>();\r\n        List<SalaryInfo> wList = this.schoolService.loadBasicSalaryInfo();\r\n        List<SchoolInfo> wSchoolList = (List<SchoolInfo>) this.genericService.loadControlEntity(SchoolInfo.class);\r\n        wSIMap = setSalaryInfoHashMap(wList);\r\n        HashMap<Long, SchoolInfo> _wSIMap = setSchoolInfoHashMap(wSchoolList);\r\n        p.setSalaryInfoMap(wSIMap);\r\n\r\n        p.setSchoolInfoMap(_wSIMap);\r\n\r\n\r\n        List<EmployeePayBean> empBeanList = new ArrayList<>();\r\n\r\n        empBeanList = this.paycheckService.loadEmployeePayBeanByParentIdFromDateToDate(bc.getBusinessClientInstId(),pRunMonth , pRunYear, bc);\r\n\r\n        p.setAllowanceStartDateStr(PayrollBeanUtils.getMonthNameAndYearFromCalendarMonth(toDate.getMonthValue(), toDate.getYear()));\r\n        p.setPayDate(toDate);\r\n\r\n        List<Map<String, Object>> newCompExecSummary = new ArrayList<>();\r\n        for (EmployeePayBean data : empBeanList){\r\n            Double wBasicTotal = 0.0D;\r\n            Map<String, Object> newData = new HashMap<>();\r\n            SalaryInfo wSI = p.getSalaryInfoMap().get(data.getSalaryInfo().getId());\r\n            newData.put(bc.getStaffTypeName(), data.getEmployee().getDisplayName());\r\n            newData.put(bc.getStaffTitle(), data.getEmployee().getEmployeeId());\r\n            newData.put(\"Grade/Step\", wSI.getLevelAndStepAsStr());\r\n            if (data.getNetPay() < 1.0D)\r\n            {\r\n                newData.put(\"Basic\", wBasicTotal);\r\n            }else {\r\n                if(PayrollHRUtils.isRecordBeforeSept2019(pRunMonth, pRunYear)) {\r\n                    if (data.isPayByDays()) {\r\n                        wBasicTotal = wSI.getPartBasicSalary(data.getNoOfDays(), pRunMonth, pRunYear);\r\n                        newData.put(\"Basic\", wBasicTotal);\r\n                    } else {\r\n                        wBasicTotal = wSI.getMonthlySalary();\r\n                        newData.put(\"Basic\", wBasicTotal);\r\n                    }\r\n                }\r\n                else {\r\n                    wBasicTotal = data.getMonthlyBasic();\r\n                    newData.put(\"Basic\", wBasicTotal);\r\n                }\r\n            }\r\n\r\n            newData.put(\"Total Allowance\", data.getTotalAllowance());\r\n            newData.put(\"Gross Pay\", data.getTotalPay());\r\n            newData.put(\"Tax Paid\", data.getTaxesPaid());\r\n            newData.put(\"Pension (Employee)\", data.getContributoryPension());\r\n            newData.put(\"Total Loan Deduction\", data.getTotalGarnishments());\r\n            newData.put(\"Total Deduction\", data.getAllDedTotal());\r\n            newData.put(\"Bank\", data.getBranchName());\r\n            newData.put(\"Payable Amount\", data.getNetPay());\r\n            newData.put(bc.getMdaTitle(), data.getMdaDeptMap().getMdaInfo().getName());\r\n            newCompExecSummary.add(newData);\r\n        }\r\n\r\n        //adding table headers\r\n        List<ReportGeneratorBean> headerList = new ArrayList<>();\r\n        headerList.add(new ReportGeneratorBean(bc.getStaffTypeName(), 0));\r\n        headerList.add(new ReportGeneratorBean(bc.getStaffTitle(), 0));\r\n        headerList.add(new ReportGeneratorBean(\"Grade/Step\", 0));\r\n        headerList.add(new ReportGeneratorBean(\"Basic\", 2));\r\n        headerList.add(new ReportGeneratorBean(\"Total Allowance\", 2));\r\n        headerList.add(new ReportGeneratorBean(\"Gross Pay\", 2));\r\n        headerList.add(new ReportGeneratorBean(\"Tax Paid\", 2));\r\n        headerList.add(new ReportGeneratorBean(\"Pension (Employee)\", 2));\r\n        headerList.add(new ReportGeneratorBean(\"Total Loan Deduction\", 2));\r\n        headerList.add(new ReportGeneratorBean(\"Total Deduction\", 2));\r\n        headerList.add(new ReportGeneratorBean(\"Bank\", 0));\r\n        headerList.add(new ReportGeneratorBean(\"Payable Amount\", 2));\r\n        headerList.add(new ReportGeneratorBean(bc.getMdaTitle(), 3));\r\n\r\n        //translating table headers to meet report generator requirement\r\n        List<Map<String, Object>> mappedHeadersList = new ArrayList<>();\r\n        for(ReportGeneratorBean head : headerList){\r\n            Map<String, Object> mappedHeader = new HashMap<>();\r\n            mappedHeader.put(\"headerName\", head.getHeaderName());\r\n            mappedHeader.put(\"totalInd\", head.getTotalInd());\r\n            mappedHeadersList.add(mappedHeader);\r\n        }\r\n\r\n        //adding report headers\r\n        List<String> mainHeaders = new ArrayList<>();\r\n        mainHeaders.add(\"PAYROLL ANALYSIS - DETAILED\");\r\n        mainHeaders.add(\"Pay Period: \"+p.getAllowanceStartDateStr());\r\n\r\n        //setting report bean\r\n        rt.setTableData(newCompExecSummary);\r\n        rt.setTableHeaders(mappedHeadersList);\r\n        rt.setBusinessCertificate(bc);\r\n        rt.setMainHeaders(mainHeaders);\r\n        rt.setTableType(1);\r\n        rt.setGroupBy(bc.getMdaTitle());\r\n        rt.setSubGroupBy(null);\r\n        rt.setReportTitle(\"PAYROLL ANALYSIS - DETAILED BY MDA\");\r\n        rt.setTotalInd(1);\r\n\r\n        if(reportType == 1) {\r\n            simpleExcelReportGeneratorClass.getExcel(response, request, rt);\r\n        }\r\n        else{\r\n            rt.setOutputInd(true);\r\n            pdfSimpleGeneratorClass.getPdf(response, request, rt);\r\n        }\r\n    }\r\n\r\n    private HashMap<Long, SalaryInfo> setSalaryInfoHashMap(List<SalaryInfo> list)\r\n    {\r\n        HashMap<Long, SalaryInfo> wRetMap = new HashMap<Long, SalaryInfo>();\r\n        for (SalaryInfo s : list) {\r\n            wRetMap.put(s.getId(), s);\r\n        }\r\n        return wRetMap;\r\n    }\r\n\r\n    private HashMap<Long, SchoolInfo> setSchoolInfoHashMap(List<SchoolInfo> pSchoolList)\r\n    {\r\n        HashMap<Long, SchoolInfo> wRetMap = new HashMap<Long, SchoolInfo>();\r\n        for (SchoolInfo s : pSchoolList) {\r\n            wRetMap.put(s.getId(), s);\r\n        }\r\n        return wRetMap;\r\n    }\r\n\r\n    @RequestMapping({\"/payrollAnalysisExcel.do\"})\r\n    public void payrollSetupForm(@RequestParam(\"rm\") int pRunMonth, @RequestParam(\"ry\") int pRunYear, @RequestParam(\"rt\") int reportType, Model model,\r\n                                 HttpServletRequest request, HttpServletResponse response) throws HttpSessionRequiredException, EpmAuthenticationException, IOException {\r\n        SessionManagerService.manageSession(request, model);\r\n        BusinessCertificate bc = super.getBusinessCertificate(request);\r\n\r\n        SimpleExcelReportGeneratorClass simpleExcelReportGeneratorClass = new SimpleExcelReportGeneratorClass();\r\n\r\n        PdfSimpleGeneratorClass pdfSimpleGeneratorClass = new PdfSimpleGeneratorClass();\r\n\r\n        ReportGeneratorBean rt = new ReportGeneratorBean();\r\n\r\n        PayrollSummaryBean p = new PayrollSummaryBean();\r\n        LocalDate fromDate = PayrollBeanUtils.getDateFromMonthAndYear(pRunMonth, pRunYear);\r\n        LocalDate toDate = LocalDate.now();\r\n        toDate.of(fromDate.getYear(), fromDate.getMonthValue(), fromDate.lengthOfMonth());\r\n\r\n        List<EmployeePayBean> empBeanList = new ArrayList<EmployeePayBean>();\r\n\r\n        empBeanList = this.paycheckService.loadEmployeePayBeanByParentIdFromDateToDate(bc.getBusinessClientInstId(), pRunMonth, pRunYear, bc);\r\n\r\n\r\n        HashMap<Long, SalaryInfo> wSIMap = new HashMap<Long,SalaryInfo>();\r\n        List<SalaryInfo> wList = this.schoolService.loadBasicSalaryInfo();\r\n        /*List<SchoolInfo> wSchoolList = (List<SchoolInfo>) this.payrollService.loadAllByHqlStr(\"from SchoolInfo\");\r\n         */\r\n        //  HashMap<Integer,SchoolInfo> _wSIMap = setSchoolInfoHashMap(wSchoolList);\r\n        wSIMap = setSalaryInfoHashMap(wList);\r\n        p.setSalaryInfoMap(wSIMap);\r\n\r\n        // p.setSchoolInfoMap(_wSIMap);\r\n\r\n        p.setAllowanceStartDateStr(PayrollBeanUtils.getMonthNameAndYearFromCalendarMonth(toDate.getMonthValue(), toDate.getYear()));\r\n        p.setPayDate(toDate);\r\n\r\n        List<Map<String, Object>> newCompExecSummary = new ArrayList<>();\r\n        for (EmployeePayBean data : empBeanList){\r\n            Double wBasicTotal = 0.0D;\r\n            Map<String, Object> newData = new HashMap<>();\r\n            SalaryInfo wSI = p.getSalaryInfoMap().get(data.getSalaryInfo().getId());\r\n            newData.put(bc.getStaffTypeName(), data.getEmployee().getFirstName() +\", \"+data.getEmployee().getLastName()+ \", \"+ data.getEmployee().getInitials());\r\n            newData.put(bc.getStaffTitle(), data.getEmployee().getEmployeeId());\r\n            newData.put(\"Grade/Step\", wSI.getLevelAndStepAsStr());\r\n            if (data.getNetPay() < 1.0D)\r\n            {\r\n                newData.put(\"Basic\", wBasicTotal);\r\n            }else {\r\n                if(PayrollHRUtils.isRecordBeforeSept2019(pRunMonth, pRunYear)) {\r\n                    if (data.isPayByDays()) {\r\n                        wBasicTotal = wSI.getPartBasicSalary( data.getNoOfDays(), pRunMonth, pRunYear);\r\n                        newData.put(\"Basic\", wBasicTotal);\r\n                    } else {\r\n                        wBasicTotal = wSI.getMonthlySalary();\r\n                        newData.put(\"Basic\", wBasicTotal);\r\n                    }\r\n                }\r\n                else {\r\n                    wBasicTotal = data.getMonthlyBasic();\r\n                    newData.put(\"Basic\", wBasicTotal);\r\n                }\r\n            }\r\n\r\n            newData.put(\"Total Allowance\", data.getTotalAllowance());\r\n            newData.put(\"Gross Pay\", data.getTotalPay());\r\n            newData.put(\"Tax Paid\", data.getTaxesPaid());\r\n            newData.put(\"Pension (Employee)\", data.getContributoryPension());\r\n            newData.put(\"Total Loan Deduction\", data.getTotalGarnishments());\r\n            newData.put(\"Total Deduction\", data.getAllDedTotal());\r\n            newData.put(\"Account No.\", data.getAccountNumber());\r\n            newData.put(\"Bank\", data.getBranchName());\r\n            newData.put(\"Payable Amount\", data.getNetPay());\r\n            newData.put(\"MDA\", data.getMdaDeptMap().getMdaInfo().getName());\r\n            newCompExecSummary.add(newData);\r\n        }\r\n\r\n        //adding table headers\r\n        List<ReportGeneratorBean> headerList = new ArrayList<>();\r\n        headerList.add(new ReportGeneratorBean(bc.getStaffTypeName(), 0));\r\n        headerList.add(new ReportGeneratorBean(bc.getStaffTitle(), 0));\r\n        headerList.add(new ReportGeneratorBean(\"Grade/Step\", 0));\r\n        headerList.add(new ReportGeneratorBean(\"Basic\", 2));\r\n        headerList.add(new ReportGeneratorBean(\"Total Allowance\", 2));\r\n        headerList.add(new ReportGeneratorBean(\"Gross Pay\", 2));\r\n        headerList.add(new ReportGeneratorBean(\"Tax Paid\", 2));\r\n        headerList.add(new ReportGeneratorBean(\"Pension (Employee)\", 2));\r\n        headerList.add(new ReportGeneratorBean(\"Total Loan Deduction\", 2));\r\n        headerList.add(new ReportGeneratorBean(\"Total Deduction\", 2));\r\n        headerList.add(new ReportGeneratorBean(\"Account No\", 0));\r\n        headerList.add(new ReportGeneratorBean(\"Bank\", 0));\r\n        headerList.add(new ReportGeneratorBean(\"Payable Amount\", 2));\r\n        headerList.add(new ReportGeneratorBean(\"MDA\", 0));\r\n\r\n        //translating table headers to meet report generator requirement\r\n        List<Map<String, Object>> mappedHeadersList = new ArrayList<>();\r\n        for(ReportGeneratorBean head : headerList){\r\n            Map<String, Object> mappedHeader = new HashMap<>();\r\n            mappedHeader.put(\"headerName\", head.getHeaderName());\r\n            mappedHeader.put(\"totalInd\", head.getTotalInd());\r\n            mappedHeadersList.add(mappedHeader);\r\n        }\r\n\r\n        //adding report headers\r\n        List<String> mainHeaders = new ArrayList<>();\r\n        mainHeaders.add(\"PAYROLL ANALYSIS - DETAILED\");\r\n        mainHeaders.add(\"Pay Period: \"+p.getAllowanceStartDateStr());\r\n\r\n        //setting report bean\r\n        rt.setTableData(newCompExecSummary);\r\n        rt.setTableHeaders(mappedHeadersList);\r\n        rt.setBusinessCertificate(bc);\r\n        rt.setMainHeaders(mainHeaders);\r\n        rt.setTableType(0);\r\n        rt.setGroupBy(null);\r\n        rt.setSubGroupBy(null);\r\n        rt.setReportTitle(\"PAYROLL ANALYSIS - DETAILED\");\r\n        rt.setTotalInd(1);\r\n\r\n        if(reportType == 1) {\r\n            simpleExcelReportGeneratorClass.getExcel(response, request, rt);\r\n        }\r\n        else{\r\n            rt.setOutputInd(true);\r\n            pdfSimpleGeneratorClass.getPdf(response, request, rt);\r\n        }\r\n    }\r\n\r\n\r\n    @RequestMapping({\"/mdapSummaryDetailsExcel.do\"})\r\n    public void setupForm(Model pModel, HttpServletRequest pRequest, HttpServletRequest request,\r\n                          HttpServletResponse response) throws HttpSessionRequiredException, EpmAuthenticationException, IOException {\r\n        SessionManagerService.manageSession(request, pModel);\r\n\r\n\r\n        MDAPMiniBeanHolder wMBH = new MDAPMiniBeanHolder();\r\n\r\n        BusinessCertificate bc = getBusinessCertificate(request);\r\n\r\n        SimpleExcelReportGeneratorClass simpleExcelReportGeneratorClass = new SimpleExcelReportGeneratorClass();\r\n\r\n        ReportGeneratorBean rt = new ReportGeneratorBean();\r\n\r\n        List<MPBAMiniBean> wStoreList = new ArrayList<MPBAMiniBean>();\r\n\r\n        for (int i = 1; i < 5; i++)\r\n        {\r\n            List<MPBAMiniBean> wAgeFemaleList = this.hrService.getMDAPDetailsByGenderAndCode(\"F\", i, bc);\r\n            List<MPBAMiniBean> wAgeMaleList = this.hrService.getMDAPDetailsByGenderAndCode(\"M\", i, bc);\r\n\r\n            wStoreList.addAll(getDisplayBeanList(wAgeFemaleList, wAgeMaleList));\r\n        }\r\n\r\n        wMBH = setTotals(wMBH, wStoreList);\r\n\r\n        List <MPBAMiniBean> pList = wMBH.getMpbaMiniBeanList();\r\n\r\n        List<Map<String, Object>> bankSummaryList = new ArrayList<>();\r\n        Double Basic = 0.00;\r\n        for (MPBAMiniBean data : pList) {\r\n            Map<String, Object> newData = new HashMap<>();\r\n            newData.put(\"Organization\", data.getName());\r\n            newData.put(\"Code Name\", data.getCodeName());\r\n            newData.put(\"Head/Permanent Secretary\", data.getHead());\r\n            newData.put(\"Parent Ministry\", data.getParentObjectName());\r\n            newData.put(\"Type\", data.getType());\r\n            newData.put(\"Staff Strength\", data.getStaffStrength());\r\n            newData.put(\"Female Staff\", data.getNoOfFemales());\r\n            newData.put(\"Male Staff\", data.getNoOfMales());\r\n            newData.put(\"Female Staff (%)\", data.getFemalePercentageStr());\r\n            newData.put(\"Male Staff (%)\", data.getMalePercentageStr());\r\n            bankSummaryList.add(newData);\r\n        }\r\n\r\n        List<ReportGeneratorBean> list = new ArrayList<>();\r\n        list.add(new ReportGeneratorBean(bc.getStaffTypeName(), 0));\r\n        list.add(new ReportGeneratorBean(bc.getStaffTitle(), 0));\r\n        list.add(new ReportGeneratorBean(\"Organization\", 0));\r\n        list.add(new ReportGeneratorBean(\"Code Name\", 0));\r\n        list.add(new ReportGeneratorBean(\"Head/Permanent Secretary\", 0));\r\n        list.add(new ReportGeneratorBean(\"Parent Ministry\", 0));\r\n        list.add(new ReportGeneratorBean(\"Type\", 0));\r\n        list.add(new ReportGeneratorBean(\"Staff Strength\", 1));\r\n        list.add(new ReportGeneratorBean(\"Female Staff\", 1));\r\n        list.add(new ReportGeneratorBean(\"Male Staff\", 1));\r\n        list.add(new ReportGeneratorBean(\"Female Staff (%)\", 0));\r\n        list.add(new ReportGeneratorBean(\"Male Staff (%)\", 0));\r\n\r\n\r\n        List<Map<String, Object>> BankHeaders = new ArrayList<>();\r\n        for(ReportGeneratorBean head : list){\r\n            Map<String, Object> mappedHeader = new HashMap<>();\r\n            mappedHeader.put(\"headerName\", head.getHeaderName());\r\n            mappedHeader.put(\"totalInd\", head.getTotalInd());\r\n            BankHeaders.add(mappedHeader);\r\n        }\r\n\r\n        List<String> mainHeaders = new ArrayList<>();\r\n        mainHeaders.add(\"List of Ministries, Departments, Agencies in Ogun State.\");\r\n\r\n        rt.setBusinessCertificate(bc);\r\n        rt.setGroupBy(null);\r\n        rt.setReportTitle(\"MDA Employees Summary\");\r\n        rt.setMainHeaders(mainHeaders);\r\n        rt.setSubGroupBy(null);\r\n        rt.setTableData(bankSummaryList);\r\n        rt.setTableHeaders(BankHeaders);\r\n        rt.setTableType(0);\r\n        rt.setTotalInd(1);\r\n        simpleExcelReportGeneratorClass.getExcel(response, request, rt);\r\n    }\r\n\r\n    private MDAPMiniBeanHolder setTotals(MDAPMiniBeanHolder pMBH,\r\n                                         List<MPBAMiniBean> pStoreList){\r\n        Collections.sort(pStoreList);\r\n        Double tM = 0.0D;\r\n        Double tF = 0.0D;\r\n        for(MPBAMiniBean m : pStoreList){\r\n            pMBH.setTotalNoOfFemales(pMBH.getTotalNoOfFemales() + m.getNoOfFemales());\r\n            pMBH.setTotalNoOfMales(pMBH.getTotalNoOfMales() + m.getNoOfMales());\r\n            pMBH.setTotalStaffStrength(pMBH.getTotalStaffStrength() + m.getStaffStrength());\r\n            tM = tM + m.getMalePercentage();\r\n            tF = tF + m.getFemalePercentage();\r\n            pMBH.setTotalMalePercentage(tM);\r\n            pMBH.setTotalFemalePercentage(tF);\r\n        }\r\n        pMBH.setMpbaMiniBeanList(pStoreList);\r\n        return pMBH;\r\n    }\r\n\r\n    private List<MPBAMiniBean> getDisplayBeanList(\r\n            List<MPBAMiniBean> pAgeFemaleList, List<MPBAMiniBean> pAgeMaleList)\r\n    {\r\n\r\n        HashMap<Long,MPBAMiniBean> wFillMap = new HashMap<Long,MPBAMiniBean>();\r\n\r\n        for(MPBAMiniBean m : pAgeFemaleList ){\r\n\r\n            if(wFillMap.containsKey(m.getId())){\r\n                MPBAMiniBean n = wFillMap.get(m.getId());\r\n                n.setNoOfFemales(n.getNoOfFemales()+m.getNoOfFemales());\r\n                n.setFemalePercentage(m.getFemalePercentage());\r\n                n.setStaffStrength(n.getStaffStrength() + m.getNoOfFemales());\r\n                wFillMap.put(n.getId(), n);\r\n            }else{\r\n                //This should typically not happen often.\r\n                m.setStaffStrength(m.getStaffStrength() + m.getNoOfFemales());\r\n                wFillMap.put(m.getId(), m);\r\n            }\r\n\r\n        }\r\n        for(MPBAMiniBean m : pAgeMaleList ){\r\n\r\n            if(wFillMap.containsKey(m.getId())){\r\n                MPBAMiniBean n = wFillMap.get(m.getId());\r\n                n.setNoOfMales(m.getNoOfMales());\r\n                n.setMalePercentage(m.getMalePercentage());\r\n                n.setStaffStrength(n.getStaffStrength() + m.getNoOfMales());\r\n                wFillMap.put(n.getId(), n);\r\n            }else{\r\n                //This should typically not happen often.\r\n                m.setStaffStrength(m.getStaffStrength() + m.getNoOfMales());\r\n                wFillMap.put(m.getId(), m);\r\n            }\r\n\r\n        }\r\n        //Now create a list and return the list...\r\n\r\n        return createListFromHashMap(wFillMap);\r\n    }\r\n\r\n    private List<MPBAMiniBean> createListFromHashMap(HashMap<Long, MPBAMiniBean> pFillMap){\r\n        List<MPBAMiniBean> wRetList = new ArrayList<MPBAMiniBean>();\r\n        Set<Map.Entry<Long,MPBAMiniBean>> set = pFillMap.entrySet();\r\n        Iterator<Map.Entry<Long, MPBAMiniBean>> i = set.iterator();\r\n\r\n        while(i.hasNext()){\r\n            Map.Entry<Long,MPBAMiniBean> me = (Map.Entry<Long,MPBAMiniBean>)i.next();\r\n            me.getValue().setDisplayStyle(\"reportOdd\");\r\n            wRetList.add(me.getValue());\r\n        }\r\n\r\n        return wRetList;\r\n    }\r\n\r\n\r\n    @RequestMapping({\"/paySumByGLPayGroupExcel.do\"})\r\n    public void setupForm2 (@RequestParam(\"rm\") int pRunMonth,\r\n                                  @RequestParam(\"ry\") int pRunYear,\r\n                                  Model model, HttpServletRequest request, HttpServletResponse response) throws HttpSessionRequiredException, EpmAuthenticationException, IOException {\r\n        SessionManagerService.manageSession(request, model);\r\n        BusinessCertificate bc = super.getBusinessCertificate(request);\r\n\r\n        ReportGeneratorBean rt = new ReportGeneratorBean();\r\n\r\n        SimpleExcelReportGeneratorClass simpleExcelReportGeneratorClass = new SimpleExcelReportGeneratorClass();\r\n\r\n        WageBeanContainer wBEOB = new WageBeanContainer();\r\n        wBEOB.setRunMonth(pRunMonth);\r\n        wBEOB.setRunYear(pRunYear);\r\n\r\n\r\n        List<NamedEntityBean> wEPBList = this.payrollService.loadPayrollSummaryByRunMonthAndYear(bc, pRunMonth, pRunYear);\r\n\r\n\r\n        wBEOB.setTotalNoOfEmp(wEPBList.size());\r\n        HashMap<String,NamedEntityBean> wModelBean = new HashMap<String,NamedEntityBean>();\r\n        Integer OTHER_ID = 20;\r\n\r\n        for (NamedEntityBean e : wEPBList)\r\n        {\r\n            e = PayrollUtils.makeCode(e,OTHER_ID);\r\n            if(e.getCurrentOtherId() != null && e.getCurrentOtherId() > 0){\r\n                OTHER_ID = e.getCurrentOtherId();\r\n            }\r\n            NamedEntityBean wNEB = wModelBean.get(e.getName());\r\n            if(wNEB == null){\r\n                wNEB = new  NamedEntityBean();\r\n                wNEB.setTypeOfEmpType(e.getTypeOfEmpType());\r\n            }\r\n            wNEB.setTotalDeductions(wNEB.getTotalDeductions() + e.getTotalDeductions());\r\n            wNEB.setTotalPay(wNEB.getTotalPay() + e.getTotalPay());\r\n            wNEB.setNetPay(wNEB.getNetPay() + e.getNetPay());\r\n            wNEB.setName(e.getName());\r\n            wNEB.setId(e.getId());\r\n            wNEB.setNoOfActiveEmployees(wNEB.getNoOfActiveEmployees() + e.getNoOfActiveEmployees());\r\n            wModelBean.put(e.getName(), wNEB);\r\n            wBEOB.setTotalDeductions(wBEOB.getTotalDeductions() + e.getTotalDeductions());\r\n            wBEOB.setTotalGrossSalary(wBEOB.getTotalGrossSalary() + e.getTotalPay());\r\n            wBEOB.setTotalNetPay(wBEOB.getTotalNetPay() + e.getNetPay());\r\n            wBEOB.setTotalNoOfEmp(wBEOB.getTotalNoOfEmp() + e.getNoOfActiveEmployees());\r\n\r\n        }\r\n        wBEOB.setPayPeriodStr(PayrollBeanUtils.getMonthNameAndYearFromCalendarMonth(pRunMonth,pRunYear));\r\n\r\n        wBEOB.setNamedEntityBeanList(PayrollBeanUtils.getListFromMap(wModelBean,true));\r\n\r\n        //Now get the Details for each Row....\r\n\r\n\r\n        List<EmployeePayBean> empB = this.payrollService.loadEmployeePayBeanByParentIdAndLastPayPeriod(pRunMonth,pRunYear, 0,null, 0,0L,0, bc);\r\n\r\n\r\n        List<Map<String, Object>> contPenMapped = new ArrayList<>();\r\n        for (EmployeePayBean data : empB) {\r\n            Map<String, Object> newData = new HashMap<>();\r\n            newData.put(bc.getStaffTypeName(), data.getEmployee().getDisplayName());\r\n            newData.put(bc.getStaffTitle(), data.getEmployee().getEmployeeId());\r\n            newData.put(bc.getMdaTitle(), data.getMda());\r\n            newData.put(\"Grade/Step\", data.getSalaryInfo().getLevelAndStepAsStr());\r\n            newData.put(\"Total Allowance\", data.getTotalAllowance());\r\n            newData.put(\"Gross Pay\", data.getGrossPay());\r\n            newData.put(\"Tax Paid\", data.getTaxesPaid());\r\n            newData.put(\"Pension (Employee)\", data.getContributoryPension());\r\n            newData.put(\"Total Loan Deduction\", data.getTotalGarnishments());\r\n            newData.put(\"Total Deduction\", data.getTotalDeductions());\r\n            newData.put(\"Account Number\", data.getAccountNumber());\r\n            newData.put(\"Bank\", data.getBranchName());\r\n            newData.put(\"Payable Amount\", data.getNetPay());\r\n            newData.put(\"Employee Type\", data.getEmployeeTypeName());\r\n            contPenMapped.add(newData);\r\n        }\r\n\r\n        List<ReportGeneratorBean> tableHeaders = new ArrayList<>();\r\n        tableHeaders.add(new ReportGeneratorBean(bc.getStaffTypeName(), 0));\r\n        tableHeaders.add(new ReportGeneratorBean(bc.getStaffTitle(), 0));\r\n        tableHeaders.add(new ReportGeneratorBean(bc.getMdaTitle(), 0));\r\n        tableHeaders.add(new ReportGeneratorBean(\"Grade/Step\", 0));\r\n        tableHeaders.add(new ReportGeneratorBean(\"Total Allowance\", 2));\r\n        tableHeaders.add(new ReportGeneratorBean(\"Gross Pay\", 2));\r\n        tableHeaders.add(new ReportGeneratorBean(\"Tax Paid\", 2));\r\n        tableHeaders.add(new ReportGeneratorBean(\"Pension (Employee)\", 2));\r\n        tableHeaders.add(new ReportGeneratorBean(\"Total Loan Deduction\", 2));\r\n        tableHeaders.add(new ReportGeneratorBean(\"Total Deduction\", 2));\r\n        tableHeaders.add(new ReportGeneratorBean(\"Account Number\", 0));\r\n        tableHeaders.add(new ReportGeneratorBean(\"Bank\", 0));\r\n        tableHeaders.add(new ReportGeneratorBean(\"Payable Amount\", 2));\r\n        tableHeaders.add(new ReportGeneratorBean(\"Employee Type\", 3));\r\n\r\n        List<Map<String, Object>> OtherSpecHeaders = new ArrayList<>();\r\n        for(ReportGeneratorBean head : tableHeaders){\r\n            Map<String, Object> mappedHeader = new HashMap<>();\r\n            mappedHeader.put(\"headerName\", head.getHeaderName());\r\n            mappedHeader.put(\"totalInd\", head.getTotalInd());\r\n            OtherSpecHeaders.add(mappedHeader);\r\n        }\r\n\r\n        List<String> mainHeaders = new ArrayList<>();\r\n        mainHeaders.add(\"Payroll Summary By Grade Level and Pay Group\");\r\n\r\n\r\n        rt.setBusinessCertificate(bc);\r\n        rt.setGroupBy(\"Employee Type\");\r\n        rt.setReportTitle(\"Payroll Summary By Grade Level and Pay Group\");\r\n        rt.setMainHeaders(mainHeaders);\r\n        rt.setSubGroupBy(null);\r\n        rt.setTableData(contPenMapped);\r\n        rt.setTableHeaders(OtherSpecHeaders);\r\n        rt.setTableType(1);\r\n        rt.setTotalInd(1);\r\n\r\n\r\n        simpleExcelReportGeneratorClass.getExcel(response, request, rt);\r\n\r\n    }\r\n\r\n\r\n    @RequestMapping({\"/futureSimulationExcelReport.do\"})\r\n    public void futurePayrol(Model model, HttpServletRequest request, HttpServletResponse response) throws HttpSessionRequiredException, EpmAuthenticationException, IOException {\r\n        SessionManagerService.manageSession(request, model);\r\n        BusinessCertificate bc = super.getBusinessCertificate(request);\r\n\r\n        ReportGeneratorBean rt = new ReportGeneratorBean();\r\n\r\n        SimpleExcelReportGeneratorClass simpleExcelReportGeneratorClass = new SimpleExcelReportGeneratorClass();\r\n\r\n        List<FuturePaycheckMaster> empList = this.genericService.loadAllObjectsWithoutRestrictions(FuturePaycheckMaster.class, \"lastModTs\");\r\n\r\n        List<Map<String, Object>> contPenMapped = new ArrayList<>();\r\n        for (FuturePaycheckMaster data : empList) {\r\n            Map<String, Object> newData = new HashMap<>();\r\n            newData.put(\"Simulation Name\", data.getName());\r\n            newData.put(\"Simulation Period\", data.getSimulationMonthStr());\r\n            newData.put(\"Created By\", data.getLastModBy());\r\n            newData.put(\"Created Date\", data.getCreatedDateStr());\r\n            contPenMapped.add(newData);\r\n        }\r\n\r\n        List<ReportGeneratorBean> tableHeaders = new ArrayList<>();\r\n        tableHeaders.add(new ReportGeneratorBean(\"Simulation Name\", 0));\r\n        tableHeaders.add(new ReportGeneratorBean(\"Simulation Period\", 0));\r\n        tableHeaders.add(new ReportGeneratorBean(\"Created By\", 0));\r\n        tableHeaders.add(new ReportGeneratorBean(\"Created Date\", 0));\r\n\r\n        List<Map<String, Object>> OtherSpecHeaders = new ArrayList<>();\r\n        for(ReportGeneratorBean head : tableHeaders){\r\n            Map<String, Object> mappedHeader = new HashMap<>();\r\n            mappedHeader.put(\"headerName\", head.getHeaderName());\r\n            mappedHeader.put(\"totalInd\", head.getTotalInd());\r\n            OtherSpecHeaders.add(mappedHeader);\r\n        }\r\n\r\n        List<String> mainHeaders = new ArrayList<>();\r\n        mainHeaders.add(\"Futuristic Payroll Simulation\");\r\n\r\n\r\n        rt.setBusinessCertificate(bc);\r\n        rt.setGroupBy(null);\r\n        rt.setReportTitle(\"FuturisticPayrollSimulation\");\r\n        rt.setMainHeaders(mainHeaders);\r\n        rt.setSubGroupBy(null);\r\n        rt.setTableData(contPenMapped);\r\n        rt.setTableHeaders(OtherSpecHeaders);\r\n        rt.setTableType(0);\r\n        rt.setTotalInd(0);\r\n\r\n\r\n        simpleExcelReportGeneratorClass.getExcel(response, request, rt);\r\n\r\n    }\r\n\r\n    }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/osm/gnl/ippms/ogsg/controllers/report/PayrollManagerReportSummaryFormExt.java	(revision 6abb302a5f790d3180f86252c9617d25252ce2ee)
+++ src/main/java/com/osm/gnl/ippms/ogsg/controllers/report/PayrollManagerReportSummaryFormExt.java	(date 1616000479703)
@@ -965,7 +965,7 @@
             newData.put("Pension (Employee)", data.getContributoryPension());
             newData.put("Total Loan Deduction", data.getTotalGarnishments());
             newData.put("Total Deduction", data.getAllDedTotal());
-            newData.put("Account No.", data.getAccountNumber());
+            newData.put("Account No", data.getAccountNumber());
             newData.put("Bank", data.getBranchName());
             newData.put("Payable Amount", data.getNetPay());
             newData.put("MDA", data.getMdaDeptMap().getMdaInfo().getName());
@@ -1070,8 +1070,6 @@
         }
 
         List<ReportGeneratorBean> list = new ArrayList<>();
-        list.add(new ReportGeneratorBean(bc.getStaffTypeName(), 0));
-        list.add(new ReportGeneratorBean(bc.getStaffTitle(), 0));
         list.add(new ReportGeneratorBean("Organization", 0));
         list.add(new ReportGeneratorBean("Code Name", 0));
         list.add(new ReportGeneratorBean("Head/Permanent Secretary", 0));
Index: src/main/java/com/osm/gnl/ippms/ogsg/controllers/report/utility/PdfSimpleGeneratorClass.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.osm.gnl.ippms.ogsg.controllers.report.utility;\r\n\r\nimport com.itextpdf.io.font.PdfEncodings;\r\nimport com.itextpdf.kernel.font.PdfFontFactory;\r\nimport com.itextpdf.kernel.font.PdfFont;\r\nimport com.itextpdf.text.*;\r\nimport com.itextpdf.text.pdf.*;\r\nimport com.osm.gnl.ippms.ogsg.constants.IConstants;\r\nimport com.osm.gnl.ippms.ogsg.domain.report.ReportGeneratorBean;\r\nimport com.osm.gnl.ippms.ogsg.generic.domain.BusinessCertificate;\r\nimport com.osm.gnl.ippms.ogsg.payroll.utils.IppmsUtils;\r\nimport com.osm.gnl.ippms.ogsg.payroll.utils.PayrollHRUtils;\r\nimport lombok.extern.slf4j.Slf4j;\r\n\r\nimport javax.servlet.SingleThreadModel;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.io.*;\r\nimport java.net.MalformedURLException;\r\nimport java.text.DateFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\nimport java.time.Month;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n@Slf4j\r\npublic class PdfSimpleGeneratorClass {\r\n\r\n    /**\r\n     * Kasumu Taiwo\r\n     * 12-2020\r\n     */\r\n\r\n    List<String> tableValues = new ArrayList<>();\r\n    List<String> tableValues_sum = new ArrayList<>();\r\n    public void getPdf(HttpServletResponse response, HttpServletRequest request, ReportGeneratorBean rt) throws FileNotFoundException, MalformedURLException, IOException {\r\n\r\n\r\n        LocalDate currentdate = LocalDate.now();\r\n        int currentDay = currentdate.getDayOfMonth();\r\n        Month currentMonth = currentdate.getMonth();\r\n\r\n        List<String> files = new ArrayList<>();\r\n\r\n//        String webAppRootKey =   IConstants.TOMCAT_BASE + request.getSession().getServletContext().getContextPath();\r\n\r\n        String currentTime = DateTimeFormatter.ofPattern(\"hh.mm a\").format(LocalTime.now());\r\n//        DateFormat dateFormat = new SimpleDateFormat(\"hh.mm aa\");\r\n//        String currentTime = dateFormat.format(new Date());\r\n        int year = currentdate.getYear();\r\n\r\n        Document myPdfReport;\r\n        if(rt.getTableHeaders().size() > 5){\r\n            myPdfReport = new Document(PageSize.A2);\r\n        }\r\n        else {\r\n            myPdfReport = new Document(PageSize.LETTER);\r\n        }\r\n        try {\r\n            File currDir = new File(\".\");\r\n            String path = currDir.getAbsolutePath();\r\n            String fileLocation = path.substring(0, path.length() - 1) +rt.getReportTitle()+\".pdf\";\r\n\r\n\r\n            PdfWriter pdfwriter = PdfWriter.getInstance(myPdfReport, new FileOutputStream(fileLocation));\r\n            myPdfReport.open();\r\n            PdfFont bold = PdfFontFactory.createFont(\"Times-Bold\");\r\n//            PdfFont font = PdfFontFactory.createFont(FONT, PdfEncodings.IDENTITY_H, true);\r\n            Font largeBold = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);\r\n            Font boldFont = new Font(Font.FontFamily.HELVETICA, 8, Font.BOLD);\r\n            Font smallBold = new Font(Font.FontFamily.HELVETICA, 9, Font.BOLD);\r\n            Font normal = new Font(Font.FontFamily.HELVETICA, 8, Font.NORMAL);\r\n            Font headingFont = new Font(Font.FontFamily.HELVETICA, 14);\r\n\r\n\r\n            PdfPTable head = new PdfPTable(1);\r\n            PdfPCell t_cell;\r\n\r\n            //adding pdf Header\r\n            File imgDir = new File(\"src/main/resources/static/images/\"+rt.getBusinessCertificate().getClientLogo());\r\n            String imgPath = imgDir.getAbsolutePath();\r\n            Image img2 = Image.getInstance(imgPath);\r\n            img2.setAlignment(Element.ALIGN_CENTER);\r\n            img2.setWidthPercentage(120);\r\n            t_cell = new PdfPCell();\r\n            t_cell.setBorder(Rectangle.NO_BORDER);\r\n            t_cell.addElement(img2);\r\n            head.addCell(t_cell);\r\n            myPdfReport.add(head);\r\n\r\n            //addding pdf Main Report Title\r\n\r\n            //adding main headers\r\n            addMainHeaders(rt.getMainHeaders(), myPdfReport, boldFont);\r\n\r\n            Paragraph time = new Paragraph(currentDay + \" \" + currentMonth + \", \" + year, smallBold);\r\n            time.setAlignment(Element.ALIGN_RIGHT);\r\n            myPdfReport.add(time);\r\n\r\n            Paragraph time2 = new Paragraph(currentTime, smallBold);\r\n            time2.setAlignment(Element.ALIGN_RIGHT);\r\n            myPdfReport.add(time2);\r\n            myPdfReport.add(new Paragraph(\"\\n\"));\r\n\r\n            //adding table headers\r\n\r\n\r\n\r\n\r\n            PdfPTable newTable = null;\r\n            Boolean addOne;\r\n            //check if data should be grouped\r\n            if(rt.getTableType() == 0) {\r\n                addTableHeaders(rt.getTableHeaders(), myPdfReport, boldFont, true);\r\n                ungroupedData(rt.getTableData(), rt.getTableHeaders(), myPdfReport, normal, boldFont, rt.getTotalInd());\r\n            }\r\n            else if (rt.getTableType() == 1){\r\n                //grouping table data before adding cells\r\n                addTableHeaders(rt.getTableHeaders(), myPdfReport, boldFont, false);\r\n                groupData(rt.getTableData(), rt.getTableHeaders(), newTable, myPdfReport, normal, boldFont, rt.getGroupBy(), rt.getTotalInd());\r\n            }\r\n            else if (rt.getTableType() == 2){\r\n//                subGroupData(rt.getTableData(), rt.getTableHeaders(), rt.getReportTitle(), rt.getGroupBy(), rt.getSubGroupBy());\r\n            }\r\n            //Attach report table to PDF /\r\n            onEndPage(pdfwriter, myPdfReport, rt.getWatermark());\r\n\r\n            myPdfReport.close();\r\n\r\n            FileInputStream baos = new FileInputStream(fileLocation);\r\n\r\n\r\n\r\n            response.setHeader(\"Expires\", \"0\");\r\n            response.setHeader(\"Cache-Control\", \"must-revalidate, post-check=0, pre-check=0\");\r\n            response.setHeader(\"Pragma\", \"public\");\r\n            response.setContentType(\"application/pdf\");\r\n            response.setHeader(\"Content-Disposition\", \"attachment; filename=\"+rt.getReportTitle()+\".pdf\");\r\n\r\n           if(IppmsUtils.isNull(rt.isOutputInd()) || rt.isOutputInd()) {\r\n               OutputStream os = response.getOutputStream();\r\n\r\n               os = response.getOutputStream();\r\n               byte buffer[] = new byte[8192];\r\n               int bytesRead;\r\n\r\n               while ((bytesRead = baos.read(buffer)) != -1) {\r\n                   os.write(buffer, 0, bytesRead);\r\n               }\r\n\r\n\r\n               try {\r\n                   os.close();\r\n               } catch (Exception wEx) {\r\n\r\n               }\r\n           }\r\n\r\n        } catch (IOException | DocumentException ex) {\r\n\r\n        }\r\n//        os.close();\r\n    }\r\n\r\n    private void addTableHeaders(List<Map<String, Object>> tableHeaders, Document myPdfReport, Font bold, Boolean addOne) throws DocumentException {\r\n        PdfPTable myReportTable;\r\n\r\n        PdfPTable outerTable = new PdfPTable(1);\r\n\r\n\r\n        if (addOne == true) {\r\n            myReportTable = new PdfPTable(tableHeaders.size() + 1);\r\n        }\r\n        else{\r\n            myReportTable = new PdfPTable(tableHeaders.size());\r\n        }\r\n        myReportTable.setWidthPercentage(100);\r\n        //create a cell object\r\n        PdfPCell tableCell;\r\n\r\n        tableCell = new PdfPCell(new Phrase(\"S/No\", bold));\r\n        tableCell.setBorder(Rectangle.LEFT | Rectangle.TOP | Rectangle.BOTTOM);\r\n        tableCell.setBackgroundColor(new BaseColor(204, 255, 204));\r\n        myReportTable.addCell(tableCell);\r\n        //add headers\r\n        int i = 0;\r\n        for (Map<String, Object> str : tableHeaders) {\r\n            i++;\r\n            int totalList = tableHeaders.size();\r\n            if(str.get(\"totalInd\").toString().equals(\"3\")){\r\n//                tableCell = new PdfPCell(new Phrase(\"\"));\r\n//                tableCell.setBorder(Rectangle.NO_BORDER);\r\n//                myReportTable.addCell(tableCell);\r\n            }\r\n            else if(str.get(\"totalInd\").toString().equals(\"1\")){\r\n                String field = str.get(\"headerName\").toString();\r\n                tableCell = new PdfPCell(new Phrase(field, bold));\r\n                tableCell.setBackgroundColor(new BaseColor(204, 255, 204));\r\n                tableCell.setHorizontalAlignment(Element.ALIGN_RIGHT);\r\n                if(i == totalList){\r\n                    tableCell.setBorder(Rectangle.RIGHT | Rectangle.BOTTOM | Rectangle.TOP);\r\n                }\r\n                else{\r\n                    tableCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);\r\n                }\r\n                myReportTable.addCell(tableCell);\r\n            }\r\n            else if(str.get(\"totalInd\").toString().equals(\"2\")){\r\n                String field = str.get(\"headerName\").toString();\r\n                tableCell = new PdfPCell(new Phrase(field, bold));\r\n                tableCell.setBackgroundColor(new BaseColor(204, 255, 204));\r\n                tableCell.setHorizontalAlignment(Element.ALIGN_RIGHT);\r\n                if(i == totalList){\r\n                    tableCell.setBorder(Rectangle.RIGHT | Rectangle.BOTTOM | Rectangle.TOP);\r\n                }\r\n                else{\r\n                    tableCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);\r\n                }\r\n                myReportTable.addCell(tableCell);\r\n            }\r\n            else {\r\n                String field = str.get(\"headerName\").toString();\r\n                tableCell = new PdfPCell(new Phrase(field, bold));\r\n                tableCell.setBackgroundColor(new BaseColor(204, 255, 204));\r\n                if(i == totalList){\r\n                    tableCell.setBorder(Rectangle.RIGHT | Rectangle.BOTTOM | Rectangle.TOP);\r\n                }\r\n                else{\r\n                    tableCell.setBorder(Rectangle.BOTTOM | Rectangle.TOP);\r\n                }\r\n                myReportTable.addCell(tableCell);\r\n            }\r\n\r\n        }\r\n//        PdfPCell cell = new PdfPCell();\r\n//        cell.addElement(myReportTable);\r\n//        outerTable.addCell(cell);\r\n\r\n        myPdfReport.add(myReportTable);\r\n    }\r\n\r\n    private void addMainHeaders(List<String> mainHeaders, Document myPdfReport, Font font) throws DocumentException {\r\n\r\n        for (String header : mainHeaders){\r\n            Paragraph value = new Paragraph(header, font);\r\n            value.setAlignment(Element.ALIGN_LEFT);\r\n            myPdfReport.add(value);\r\n            myPdfReport.add(new Paragraph(\"\\n\"));\r\n        }\r\n    }\r\n\r\n    private void groupData(List<Map<String, Object>> data, List<Map<String, Object>> headers, PdfPTable newTable,\r\n                           Document myPdfReport, Font normal, Font boldFont, String groupBy, int totalInd) throws DocumentException {\r\n        // TODO Auto-generated method stub\r\n        for (Map<String, Object> row : data) {\r\n            String dump_value = \"\";\r\n            String tableValue = row.get(groupBy).toString();\r\n            boolean test_existence = test(tableValue);\r\n            if(!test_existence) {\r\n                dump_value = \"yes\";\r\n                String text = \"Grouping By \";\r\n                Paragraph group_header = new Paragraph(tableValue, boldFont);\r\n                group_header.setAlignment(Element.ALIGN_LEFT);\r\n                myPdfReport.add(group_header);\r\n\r\n\r\n                newTable = new PdfPTable(headers.size());\r\n                newTable.setWidthPercentage(100);\r\n                groupRows(data, headers, groupBy, newTable, tableValue, myPdfReport, normal);\r\n            }\r\n            else {\r\n                dump_value = \"no\";\r\n            }\r\n        }\r\n\r\n        if(totalInd == 1)\r\n        sumRowCells(data, headers, newTable, myPdfReport, boldFont);\r\n    }\r\n\r\n    private void ungroupedData(List<Map<String, Object>> data, List<Map<String, Object>> headers, Document myPdfReport, Font normal, Font bold, int totalInd) throws DocumentException {\r\n        // TODO Auto-generated method stub\r\n        PdfPTable myReportTable = new PdfPTable(headers.size()+1);\r\n        myReportTable.setWidthPercentage(100);\r\n//        PdfPCell tableCell = new PdfPCell();\r\n        int i = 1;\r\n        for (Map<String, Object> row : data) {\r\n            PdfPCell tableCell1 = new PdfPCell(new Phrase(i++ +\"\", normal));\r\n            tableCell1.setBorder(Rectangle.NO_BORDER);\r\n            myReportTable.addCell(tableCell1);\r\n\r\n            for (Map<String, Object> str : headers) {\r\n                if(row.get(str.get(\"headerName\").toString()) != null) {\r\n                    if (str.get(\"totalInd\").toString().equals(\"1\")) {\r\n                        String num_val = row.get(str.get(\"headerName\").toString()).toString();\r\n                        Double val = Double.valueOf(num_val);\r\n                        PdfPCell tableCell = new PdfPCell(new Phrase(PayrollHRUtils.getDecimalFormat().format(val), normal));\r\n                        tableCell.setBorder(Rectangle.NO_BORDER);\r\n                        tableCell.setHorizontalAlignment(Element.ALIGN_RIGHT);\r\n                        myReportTable.addCell(tableCell);\r\n                    } else if (str.get(\"totalInd\").toString().equals(\"2\")) {\r\n                        String num_val = row.get(str.get(\"headerName\").toString()).toString();\r\n                        Double val = Double.valueOf(num_val);\r\n                        PdfPCell tableCell = new PdfPCell(new Paragraph(PayrollHRUtils.getDecimalFormat().format(val), normal));\r\n                        tableCell.setBorder(Rectangle.NO_BORDER);\r\n                        tableCell.setHorizontalAlignment(Element.ALIGN_RIGHT);\r\n                        myReportTable.addCell(tableCell);\r\n\r\n                    } else {\r\n                        PdfPCell tableCell = new PdfPCell(new Phrase(row.get(str.get(\"headerName\").toString()).toString(), normal));\r\n                        tableCell.setBorder(Rectangle.NO_BORDER);\r\n                        myReportTable.addCell(tableCell);\r\n                    }\r\n//                    PdfPCell tableCell = new PdfPCell(new Phrase(\"theyey\", boldFont));\r\n//                    tableCell.setBorder(Rectangle.NO_BORDER);\r\n//                    myReportTable.addCell(tableCell);\r\n\r\n                }\r\n                else{\r\n                    PdfPCell tableCell = new PdfPCell(new Phrase(\"\", normal));\r\n                    tableCell.setBorder(Rectangle.NO_BORDER);\r\n                    myReportTable.addCell(tableCell);\r\n                }\r\n            }\r\n        }\r\n        myPdfReport.add(myReportTable);\r\n\r\n        if(totalInd == 1) {\r\n            sumRowCells(data, headers, myReportTable, myPdfReport, bold);\r\n        }\r\n    }\r\n\r\n    //adding rows to table by group\r\n    private void groupRows(List<Map<String, Object>> data, List<Map<String, Object>> headers, String groupBy, PdfPTable newTable, String tableValue, Document myPdfReport, Font normal) throws DocumentException {\r\n\r\n       int i = 1;\r\n        for (Map<String, Object> row : data) {\r\n            if(row.get(groupBy).toString().equals(tableValue)) {\r\n                PdfPCell tableCell1 = new PdfPCell(new Phrase(i++ + \"\", normal));\r\n                tableCell1.setBorder(Rectangle.NO_BORDER);\r\n                newTable.addCell(tableCell1);\r\n            }\r\n            else{\r\n\r\n            }\r\n\r\n            for (Map<String, Object> str : headers) {\r\n                if ((row.get(str.get(\"headerName\").toString()) != null) && (row.get(groupBy).toString().equals(tableValue))){\r\n                    if(str.get(\"totalInd\").toString().equals(\"1\")) {\r\n                        String num_val = row.get(str.get(\"headerName\").toString()).toString();\r\n                        Double val = Double.valueOf(num_val);\r\n                        PdfPCell tableCell = new PdfPCell(new Phrase(PayrollHRUtils.getDecimalFormat().format(val), normal));\r\n                        tableCell.setBorder(Rectangle.NO_BORDER);\r\n                        tableCell.setHorizontalAlignment(Element.ALIGN_RIGHT);\r\n                        newTable.addCell(tableCell);\r\n                    }\r\n                    else if (str.get(\"totalInd\").toString().equals(\"2\")) {\r\n                        String num_val = row.get(str.get(\"headerName\").toString()).toString();\r\n                        Double val = Double.valueOf(num_val);\r\n                        PdfPCell tableCell = new PdfPCell(new Phrase(PayrollHRUtils.getDecimalFormat().format(val), normal));\r\n                        tableCell.setBorder(Rectangle.NO_BORDER);\r\n                        tableCell.setHorizontalAlignment(Element.ALIGN_RIGHT);\r\n                        newTable.addCell(tableCell);\r\n                    }\r\n                    else if (str.get(\"totalInd\").toString().equals(\"3\")) {\r\n//                        PdfPCell tableCell = new PdfPCell(new Phrase(\"\", normal));\r\n//                        tableCell.setBorder(Rectangle.NO_BORDER);\r\n//                        newTable.addCell(tableCell);\r\n\r\n                    }\r\n                    else {\r\n                        PdfPCell tableCell = new PdfPCell(new Phrase(row.get(str.get(\"headerName\").toString()).toString(), normal));\r\n                        tableCell.setBorder(Rectangle.NO_BORDER);\r\n                        newTable.addCell(tableCell);\r\n                    }\r\n                }\r\n                else {\r\n                        PdfPCell tableCell = new PdfPCell(new Phrase(\"\", normal));\r\n                        tableCell.setBorder(Rectangle.NO_BORDER);\r\n                        newTable.addCell(tableCell);\r\n                }\r\n            }\r\n        }\r\n        myPdfReport.add(newTable);\r\n        sumByGroup(data, headers, groupBy, myPdfReport, tableValue, normal);\r\n    }\r\n\r\n\r\n    //test method\r\n    private void sumByGroup(List<Map<String, Object>> data, List<Map<String, Object>> headers, String groupBy, Document myPdfReport, String tableValue, Font normal) throws DocumentException {\r\n        PdfPTable newTable1 = new PdfPTable(headers.size()+1);\r\n        newTable1.setWidthPercentage(100);\r\n\r\n        PdfPCell cell = new PdfPCell(new Phrase(\"Total\", normal));\r\n        newTable1.addCell(cell);\r\n        cell.setBorder(Rectangle.NO_BORDER);\r\n        cell.setBackgroundColor(new BaseColor(204, 255, 204));\r\n\r\n        for (Map<String, Object> row : headers) {\r\n            if (row.get(\"totalInd\").toString().equals(\"3\")) {\r\n\r\n            }else {\r\n                sumColumn(data, row, groupBy, newTable1, tableValue, myPdfReport, normal);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private void sumColumn(List<Map<String, Object>> data, Map<String, Object> header, String groupBy, PdfPTable newTable,\r\n                           String tableValue1, Document myPdfReport, Font normal) throws DocumentException {\r\n        // TODO Auto-generated method stub\r\n\r\n        if(header.get(\"totalInd\").toString().equals(\"1\")) {\r\n            Integer total2 = 0;\r\n            for (Map<String, Object> str : data) {\r\n                String cCompare = str.get(groupBy).toString();\r\n                if ((IppmsUtils.isNotNullOrEmpty(str.get(header.get(\"headerName\")).toString())) && (cCompare.equals(tableValue1))) {\r\n                    String no = str.get(header.get(\"headerName\").toString()).toString();\r\n                    Integer val = Integer.valueOf(no);\r\n                    total2 += val;\r\n                }\r\n            }\r\n\r\n            PdfPCell tableCell = new PdfPCell(new Phrase(PayrollHRUtils.getDecimalFormat().format(total2), normal));\r\n            tableCell.setBorder(Rectangle.NO_BORDER);\r\n            tableCell.setBackgroundColor(new BaseColor(204, 255, 204));\r\n            newTable.addCell(tableCell);\r\n        }\r\n        else if(header.get(\"totalInd\").toString().equals(\"2\")) {\r\n            Double total = 0.0;\r\n            for (Map<String, Object> str : data) {\r\n                String cCompare = str.get(groupBy).toString();\r\n                if ((IppmsUtils.isNotNullOrEmpty(str.get(header.get(\"headerName\")).toString())) && (cCompare.equals(tableValue1))) {\r\n                    String no = str.get(header.get(\"headerName\").toString()).toString();\r\n                    Double val = Double.valueOf(no);\r\n                    total += val;\r\n                }\r\n            }\r\n            PdfPCell tableCell = new PdfPCell(new Phrase( PayrollHRUtils.getDecimalFormat().format(total), normal));\r\n            tableCell.setBorder(Rectangle.NO_BORDER);\r\n            tableCell.setBackgroundColor(new BaseColor(204, 255, 204));\r\n            newTable.addCell(tableCell);\r\n        }\r\n        else{\r\n            PdfPCell tableCell = new PdfPCell();\r\n            tableCell.setBorder(Rectangle.NO_BORDER);\r\n            tableCell.setBackgroundColor(new BaseColor(204, 255, 204));\r\n            newTable.addCell(tableCell);\r\n        }\r\n        myPdfReport.add(newTable);\r\n    }\r\n\r\n    //checking if data row has already been grouped\r\n    private boolean test(String tableValue) {\r\n        if(tableValues.contains(tableValue)) {\r\n            return true;\r\n        }\r\n        else {\r\n            tableValues.add(tableValue);\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    //adding watermark to page\r\n    private void onEndPage(PdfWriter writer, Document document, String watermark) {\r\n        Font FONT = new Font(Font.FontFamily.HELVETICA, 52, Font.BOLD, new GrayColor(0.85f));\r\n        ColumnText.showTextAligned(writer.getDirectContentUnder(),\r\n                Element.ALIGN_CENTER, new Phrase(watermark, FONT),\r\n                297.5f, 421, 45f);\r\n    }\r\n\r\n    private void sumRowCells(List<Map<String, Object>> data, List<Map<String, Object>> headers, PdfPTable newTable, Document myPdfReport, Font boldFont) throws DocumentException {\r\n        PdfPTable newTable1 = new PdfPTable(headers.size()+1);\r\n        newTable1.setWidthPercentage(100);\r\n        PdfPCell cell = new PdfPCell(new Phrase(String.format(\"Grand Total\"), boldFont));\r\n        cell.setBorder(Rectangle.NO_BORDER);\r\n        cell.setBackgroundColor(new BaseColor(204, 255, 204));\r\n        newTable1.addCell(cell);\r\n\r\n        for (Map<String, Object> row : headers) {\r\n\r\n           if(row.get(\"totalInd\").toString().equals(\"1\")) {\r\n               Integer total2 = 0;\r\n                for (Map<String, Object> str : data) {\r\n                    if((str.get(row.get(\"headerName\").toString()) != null)) {\r\n                        String no = str.get(row.get(\"headerName\").toString()).toString();\r\n                        Integer val = Integer.valueOf(no);\r\n                        total2+=val;\r\n                    }\r\n                }\r\n\r\n                PdfPCell tableCell = new PdfPCell(new Phrase(String.valueOf(total2), boldFont));\r\n                tableCell.setBorder(Rectangle.NO_BORDER);\r\n                tableCell.setBackgroundColor(new BaseColor(204, 255, 204));\r\n                tableCell.setHorizontalAlignment(Element.ALIGN_RIGHT);\r\n                newTable1.addCell(tableCell);\r\n            }\r\n            else if(row.get(\"totalInd\").toString().equals(\"2\")) {\r\n               Double total = 0.0;\r\n                for (Map<String, Object> str : data) {\r\n                    if((str.get(row.get(\"headerName\").toString()) != null)) {\r\n                        String no = str.get(row.get(\"headerName\")).toString();\r\n                        Double val = Double.parseDouble(PayrollHRUtils.removeCommas(no));\r\n                        total+=val;\r\n                    }\r\n                }\r\n                String amount = PayrollHRUtils.getDecimalFormat().format(total);\r\n                PdfPCell tableCell = new PdfPCell(new Phrase(amount, boldFont));\r\n                tableCell.setBorder(Rectangle.NO_BORDER);\r\n                tableCell.setBackgroundColor(new BaseColor(204, 255, 204));\r\n                tableCell.setHorizontalAlignment(Element.ALIGN_RIGHT);\r\n                newTable1.addCell(tableCell);\r\n            }\r\n           else if(row.get(\"totalInd\").toString().equals(\"3\")) {\r\n\r\n           }\r\n            else {\r\n                PdfPCell tableCell = new PdfPCell();\r\n                tableCell.setBorder(Rectangle.NO_BORDER);\r\n                tableCell.setBackgroundColor(new BaseColor(204, 255, 204));\r\n                newTable1.addCell(tableCell);\r\n            }\r\n\r\n        }\r\n        myPdfReport.add(newTable1);\r\n//        myPdfReport.add(new Paragraph(\"\\n\"));\r\n//        myPdfReport.add(new Paragraph(\"\\n\"));\r\n//        myPdfReport.add(new Paragraph(\"\\n\"));\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/osm/gnl/ippms/ogsg/controllers/report/utility/PdfSimpleGeneratorClass.java	(revision 6abb302a5f790d3180f86252c9617d25252ce2ee)
+++ src/main/java/com/osm/gnl/ippms/ogsg/controllers/report/utility/PdfSimpleGeneratorClass.java	(date 1615998856241)
@@ -227,6 +227,7 @@
                 String field = str.get("headerName").toString();
                 tableCell = new PdfPCell(new Phrase(field, bold));
                 tableCell.setBackgroundColor(new BaseColor(204, 255, 204));
+                tableCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                 if(i == totalList){
                     tableCell.setBorder(Rectangle.RIGHT | Rectangle.BOTTOM | Rectangle.TOP);
                 }
@@ -258,7 +259,7 @@
                            Document myPdfReport, Font normal, Font boldFont, String groupBy, int totalInd) throws DocumentException {
         // TODO Auto-generated method stub
         for (Map<String, Object> row : data) {
-            String dump_value = "";
+            String dump_value = "", fiveSpaces = "     ";
             String tableValue = row.get(groupBy).toString();
             boolean test_existence = test(tableValue);
             if(!test_existence) {
@@ -268,6 +269,9 @@
                 group_header.setAlignment(Element.ALIGN_LEFT);
                 myPdfReport.add(group_header);
 
+                Paragraph spaces = new Paragraph(fiveSpaces);
+                myPdfReport.add(spaces);
+
 
                 newTable = new PdfPTable(headers.size());
                 newTable.setWidthPercentage(100);
@@ -290,7 +294,6 @@
         int i = 1;
         for (Map<String, Object> row : data) {
             PdfPCell tableCell1 = new PdfPCell(new Phrase(i++ +"", normal));
-            tableCell1.setBorder(Rectangle.NO_BORDER);
             myReportTable.addCell(tableCell1);
 
             for (Map<String, Object> str : headers) {
@@ -299,20 +302,17 @@
                         String num_val = row.get(str.get("headerName").toString()).toString();
                         Double val = Double.valueOf(num_val);
                         PdfPCell tableCell = new PdfPCell(new Phrase(PayrollHRUtils.getDecimalFormat().format(val), normal));
-                        tableCell.setBorder(Rectangle.NO_BORDER);
                         tableCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                         myReportTable.addCell(tableCell);
                     } else if (str.get("totalInd").toString().equals("2")) {
                         String num_val = row.get(str.get("headerName").toString()).toString();
                         Double val = Double.valueOf(num_val);
                         PdfPCell tableCell = new PdfPCell(new Paragraph(PayrollHRUtils.getDecimalFormat().format(val), normal));
-                        tableCell.setBorder(Rectangle.NO_BORDER);
                         tableCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                         myReportTable.addCell(tableCell);
 
                     } else {
                         PdfPCell tableCell = new PdfPCell(new Phrase(row.get(str.get("headerName").toString()).toString(), normal));
-                        tableCell.setBorder(Rectangle.NO_BORDER);
                         myReportTable.addCell(tableCell);
                     }
 //                    PdfPCell tableCell = new PdfPCell(new Phrase("theyey", boldFont));
@@ -322,7 +322,6 @@
                 }
                 else{
                     PdfPCell tableCell = new PdfPCell(new Phrase("", normal));
-                    tableCell.setBorder(Rectangle.NO_BORDER);
                     myReportTable.addCell(tableCell);
                 }
             }
@@ -341,7 +340,6 @@
         for (Map<String, Object> row : data) {
             if(row.get(groupBy).toString().equals(tableValue)) {
                 PdfPCell tableCell1 = new PdfPCell(new Phrase(i++ + "", normal));
-                tableCell1.setBorder(Rectangle.NO_BORDER);
                 newTable.addCell(tableCell1);
             }
             else{
@@ -354,7 +352,6 @@
                         String num_val = row.get(str.get("headerName").toString()).toString();
                         Double val = Double.valueOf(num_val);
                         PdfPCell tableCell = new PdfPCell(new Phrase(PayrollHRUtils.getDecimalFormat().format(val), normal));
-                        tableCell.setBorder(Rectangle.NO_BORDER);
                         tableCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                         newTable.addCell(tableCell);
                     }
@@ -362,26 +359,23 @@
                         String num_val = row.get(str.get("headerName").toString()).toString();
                         Double val = Double.valueOf(num_val);
                         PdfPCell tableCell = new PdfPCell(new Phrase(PayrollHRUtils.getDecimalFormat().format(val), normal));
-                        tableCell.setBorder(Rectangle.NO_BORDER);
                         tableCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                         newTable.addCell(tableCell);
                     }
                     else if (str.get("totalInd").toString().equals("3")) {
-//                        PdfPCell tableCell = new PdfPCell(new Phrase("", normal));
-//                        tableCell.setBorder(Rectangle.NO_BORDER);
-//                        newTable.addCell(tableCell);
+
 
                     }
                     else {
                         PdfPCell tableCell = new PdfPCell(new Phrase(row.get(str.get("headerName").toString()).toString(), normal));
-                        tableCell.setBorder(Rectangle.NO_BORDER);
+                        tableCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                         newTable.addCell(tableCell);
                     }
                 }
                 else {
-                        PdfPCell tableCell = new PdfPCell(new Phrase("", normal));
-                        tableCell.setBorder(Rectangle.NO_BORDER);
-                        newTable.addCell(tableCell);
+//                        PdfPCell tableCell = new PdfPCell(new Phrase("", normal));
+//                        tableCell.setBorder(Rectangle.NO_BORDER);
+//                        newTable.addCell(tableCell);
                 }
             }
         }
@@ -397,7 +391,6 @@
 
         PdfPCell cell = new PdfPCell(new Phrase("Total", normal));
         newTable1.addCell(cell);
-        cell.setBorder(Rectangle.NO_BORDER);
         cell.setBackgroundColor(new BaseColor(204, 255, 204));
 
         for (Map<String, Object> row : headers) {
@@ -426,7 +419,6 @@
             }
 
             PdfPCell tableCell = new PdfPCell(new Phrase(PayrollHRUtils.getDecimalFormat().format(total2), normal));
-            tableCell.setBorder(Rectangle.NO_BORDER);
             tableCell.setBackgroundColor(new BaseColor(204, 255, 204));
             newTable.addCell(tableCell);
         }
@@ -441,13 +433,11 @@
                 }
             }
             PdfPCell tableCell = new PdfPCell(new Phrase( PayrollHRUtils.getDecimalFormat().format(total), normal));
-            tableCell.setBorder(Rectangle.NO_BORDER);
             tableCell.setBackgroundColor(new BaseColor(204, 255, 204));
             newTable.addCell(tableCell);
         }
         else{
             PdfPCell tableCell = new PdfPCell();
-            tableCell.setBorder(Rectangle.NO_BORDER);
             tableCell.setBackgroundColor(new BaseColor(204, 255, 204));
             newTable.addCell(tableCell);
         }
@@ -478,7 +468,6 @@
         PdfPTable newTable1 = new PdfPTable(headers.size()+1);
         newTable1.setWidthPercentage(100);
         PdfPCell cell = new PdfPCell(new Phrase(String.format("Grand Total"), boldFont));
-        cell.setBorder(Rectangle.NO_BORDER);
         cell.setBackgroundColor(new BaseColor(204, 255, 204));
         newTable1.addCell(cell);
 
@@ -495,7 +484,6 @@
                 }
 
                 PdfPCell tableCell = new PdfPCell(new Phrase(String.valueOf(total2), boldFont));
-                tableCell.setBorder(Rectangle.NO_BORDER);
                 tableCell.setBackgroundColor(new BaseColor(204, 255, 204));
                 tableCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                 newTable1.addCell(tableCell);
@@ -511,7 +499,6 @@
                 }
                 String amount = PayrollHRUtils.getDecimalFormat().format(total);
                 PdfPCell tableCell = new PdfPCell(new Phrase(amount, boldFont));
-                tableCell.setBorder(Rectangle.NO_BORDER);
                 tableCell.setBackgroundColor(new BaseColor(204, 255, 204));
                 tableCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                 newTable1.addCell(tableCell);
@@ -521,7 +508,6 @@
            }
             else {
                 PdfPCell tableCell = new PdfPCell();
-                tableCell.setBorder(Rectangle.NO_BORDER);
                 tableCell.setBackgroundColor(new BaseColor(204, 255, 204));
                 newTable1.addCell(tableCell);
             }
Index: src/main/java/com/osm/gnl/ippms/ogsg/base/services/PaycheckService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * Copyright (c) 2020.\r\n * This code is proprietary to GNL Systems Ltd. All rights reserved.\r\n */\r\n\r\npackage com.osm.gnl.ippms.ogsg.base.services;\r\n\r\nimport com.osm.gnl.ippms.ogsg.abstractentities.AbstractPaycheckEntity;\r\nimport com.osm.gnl.ippms.ogsg.base.dao.IPaycheckDao;\r\nimport com.osm.gnl.ippms.ogsg.control.entities.EmployeeType;\r\nimport com.osm.gnl.ippms.ogsg.control.entities.Rank;\r\nimport com.osm.gnl.ippms.ogsg.control.entities.Title;\r\nimport com.osm.gnl.ippms.ogsg.deduction.domain.EmpDeductionType;\r\nimport com.osm.gnl.ippms.ogsg.domain.beans.BankPVSummaryBean;\r\nimport com.osm.gnl.ippms.ogsg.domain.employee.AbstractEmployeeEntity;\r\nimport com.osm.gnl.ippms.ogsg.domain.employee.Employee;\r\nimport com.osm.gnl.ippms.ogsg.domain.hr.HrMiniBean;\r\nimport com.osm.gnl.ippms.ogsg.generic.domain.BusinessCertificate;\r\nimport com.osm.gnl.ippms.ogsg.location.domain.City;\r\nimport com.osm.gnl.ippms.ogsg.organization.model.MdaDeptMap;\r\nimport com.osm.gnl.ippms.ogsg.organization.model.MdaInfo;\r\nimport com.osm.gnl.ippms.ogsg.organization.model.SchoolInfo;\r\nimport com.osm.gnl.ippms.ogsg.paycheck.domain.EmployeePayBean;\r\nimport com.osm.gnl.ippms.ogsg.paycheck.domain.PaycheckDeduction;\r\nimport com.osm.gnl.ippms.ogsg.paycheck.domain.PaycheckGarnishment;\r\nimport com.osm.gnl.ippms.ogsg.paygroup.domain.SalaryInfo;\r\nimport com.osm.gnl.ippms.ogsg.payment.domain.BankBranch;\r\nimport com.osm.gnl.ippms.ogsg.payment.domain.BankInfo;\r\nimport com.osm.gnl.ippms.ogsg.payroll.utils.IppmsUtils;\r\nimport com.osm.gnl.ippms.ogsg.payroll.utils.PayrollHRUtils;\r\nimport com.osm.gnl.ippms.ogsg.payslip.beans.MDAPPaySlipSummaryBean;\r\nimport com.osm.gnl.ippms.ogsg.report.beans.NamedEntity;\r\nimport com.osm.gnl.ippms.ogsg.report.beans.NamedEntityBean;\r\nimport org.apache.commons.lang.StringUtils;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.query.NativeQuery;\r\nimport org.hibernate.query.Query;\r\nimport org.hibernate.type.StandardBasicTypes;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Repository;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.time.LocalDate;\r\nimport java.util.*;\r\n\r\n@Service(\"paycheckService\")\r\n@Repository\r\n@Transactional(readOnly = true)\r\npublic class PaycheckService {\r\n\r\n    @Autowired\r\n    private GenericService genericService;\r\n\r\n    @Autowired\r\n    private SessionFactory sessionFactory;\r\n\r\n    public SessionFactory getSessionFactory() {\r\n        return sessionFactory;\r\n    }\r\n\r\n    private final IPaycheckDao paycheckDao;\r\n\r\n    @Autowired\r\n    public PaycheckService(final IPaycheckDao paycheckDao) {\r\n        this.paycheckDao = paycheckDao;\r\n    }\r\n\r\n    public List<?> loadEmployeePayBeanByRunMonthAndRunYear(final BusinessCertificate b, final int runMonth, final int runYear){\r\n        return this.paycheckDao.loadEmployeePayBeanByRunMonthAndRunYear(b,runMonth,runYear);\r\n    }\r\n\r\n    public Long getMaxPaycheckIdForEmployee(final BusinessCertificate businessCertificate,final Long pEmpId){\r\n        return this.paycheckDao.getMaxPaycheckIdForEmployee(businessCertificate,pEmpId);\r\n    }\r\n\r\n    public LocalDate getPendingPaycheckRunMonthAndYear(BusinessCertificate businessCertificate) {\r\n\r\n        return this.paycheckDao.getPendingPaycheckRunMonthAndYear(businessCertificate);\r\n    }\r\n\r\n\r\n    public void updPendPayDedValues(EmpDeductionType pEHB, int monthValue, int year, Object[] valueAsObjectArray, BusinessCertificate businessCertificate) {\r\n        this.paycheckDao.updPendPayDedValues(pEHB,monthValue,year,valueAsObjectArray, businessCertificate);\r\n    }\r\n\r\n    public List<NamedEntity> makePaycheckYearList(BusinessCertificate businessCertificate) {return this.paycheckDao.makePaycheckYearList(businessCertificate); }\r\n\r\n    public void updateMdaForPendingPaycheck(AbstractEmployeeEntity wEmp, LocalDate wCal, Long wSchoolInstId, BusinessCertificate bc) {\r\n        this.paycheckDao.updateMdaForPendingPaychecks(wEmp,wCal,wSchoolInstId,bc);\r\n    }\r\n\r\n    public NamedEntityBean createPaySlipDisplayBean(HrMiniBean pHMB, BusinessCertificate bc) {\r\n        NamedEntityBean n = new NamedEntityBean();\r\n\r\n        String wSql = \"select count(e.id),sum(e.totalPay), sum(e.netPay), sum(e.totalDeductions) from \"+IppmsUtils.getPaycheckTableName(bc)+\" e \";\r\n\r\n        if(pHMB.isSalaryType()) {\r\n\r\n            wSql += \", SalaryType st, SalaryInfo si where  st.id = si.salaryType.id and si.id = e.salaryInfo.id and st.id = :pOjectIdVar \";\r\n            if(pHMB.getFromLevel() > 0 && pHMB.getToLevel() > 0) {\r\n                wSql += \"and si.level >= :pFromLevelVar and si.level <= :pToLevelVar \";\r\n            }else if(pHMB.getFromLevel() > 0 && pHMB.getToLevel() == 0) {\r\n                wSql += \"and si.level >= :pFromLevelVar \";\r\n            }\r\n        }else if(pHMB.isMdaType()) {\r\n\r\n            wSql += \", MdaInfo m, MdaDeptMap mdm where e.mdaDeptMap.id = mdm.id and mdm.mdaInfo.id = m.id and m.id = :pOjectIdVar \";\r\n        }else {\r\n            //Gotta be Employee...\r\n            wSql += \"where e.employee.id = :pOjectIdVar \";\r\n        }\r\n        n.setPaySlipObjTypeInd(pHMB.getMapId());\r\n\r\n        wSql += \"and e.runMonth = :pRunMonthVar and e.runYear = :pRunYearVar \";\r\n        Query query = this.sessionFactory.getCurrentSession().createQuery(wSql);\r\n        if(pHMB.isSalaryType()) {\r\n\r\n            if(pHMB.getFromLevel() > 0  ) {\r\n                query.setParameter(\"pFromLevelVar\", pHMB.getFromLevel());\r\n            }\r\n            if(pHMB.getToLevel() > 0) {\r\n                query.setParameter(\"pToLevelVar\", pHMB.getToLevel());\r\n            }\r\n        }\r\n        if(!pHMB.isNewEntity())\r\n            query.setParameter(\"pOjectIdVar\", pHMB.getId());\r\n        else {\r\n            if(pHMB.isSalaryType()){\r\n                query.setParameter(\"pOjectIdVar\", pHMB.getSalaryTypeId());\r\n            }else{\r\n                query.setParameter(\"pOjectIdVar\", pHMB.getCurrentObjectId());\r\n            }\r\n\r\n        }\r\n\r\n        query.setParameter(\"pRunMonthVar\", pHMB.getRunMonth());\r\n        query.setParameter(\"pRunYearVar\", pHMB.getRunYear());\r\n\r\n        List<Object[]> wRetVal = (ArrayList)query.list();\r\n        Object value = null;\r\n        for (Object[] o : wRetVal) {\r\n            n.setNoOfActiveEmployees(((Long)o[0]).intValue());\r\n            value = o[1];\r\n            if(value != null)\r\n                n.setTotalPay((Double)value);\r\n            else\r\n                n.setTotalPay(0.0D);\r\n            value = o[2];\r\n            if(value != null)\r\n                n.setNetPay((Double)value);\r\n            else\r\n                n.setNetPay(0.0D);\r\n            value = o[3];\r\n            if(value != null)\r\n                n.setTotalDeductions((Double)value);\r\n            else\r\n                n.setTotalDeductions(0.0D);\r\n\r\n        }\r\n\r\n        return n;\r\n    }\r\n\r\n    public List<EmployeePayBean> loadEmployeePayBeanByParentIdFromDateToDate(Long pBusClientId, int pRunMonth, int pRunYear, BusinessCertificate bc) {\r\n        ArrayList<Object[]> wRetVal = new ArrayList<Object[]>();\r\n        List wRetList = new ArrayList();\r\n\r\n\r\n        String hqlQuery = \"select p.id, mda.mdaType.mdaTypeCode, p.rent,p.transport,p.inducement,p.hazard,p.callDuty,p.otherAllowance,\" +\r\n                \"p.taxesPaid,p.unionDues,p.nhf,p.totalGarnishments,p.totalPay,p.netPay,e.id, \" +\r\n                \" e.firstName, e.lastName, e.initials, p.salaryInfo.id,e.rank,e.employeeId,\" +\r\n                \"p.mdaDeptMap.id,mda.id,mda.name,mda.codeName,\" +\r\n                \"p.tws,p.principalAllowance, p.meal,p.utility,p.ruralPosting,\" +\r\n                \"p.journal,p.domesticServant,p.driversAllowance,p.adminAllowance,p.entertainment,\" +\r\n                \"p.academicAllowance,p.tss,p.arrears,p.otherArrears,p.salaryDifference,\" +\r\n                \"p.specialAllowance,p.contractAllowance,p.totalDeductions,p.furniture,p.developmentLevy, \" +\r\n                \"p.contributoryPension,p.noOfDays,p.payByDaysInd,p.schoolInfo.id,p.accountNumber,b.name,\" +\r\n                \"b.branchSortCode,p.totalAllowance,p.employeeType.id,p.monthlyBasic from \"+ IppmsUtils.getPaycheckTableName(bc) +\" p, \"+IppmsUtils.getEmployeeTableName(bc)+\" e,\" +\r\n                \"BankBranch b, MdaInfo mda, MdaDeptMap m where e.id = p.employee.id and p.runMonth = :pRunMonth \" +\r\n                \"and p.runYear = :pRunYear and b.id = p.bankBranch.id and p.mdaDeptMap.id = m.id and m.mdaInfo.id = mda.id \" +\r\n                \"and p.businessClient.id = :pBusClientIdVar and p.netPay > 0\";\r\n\r\n        Query query = this.sessionFactory.getCurrentSession().createQuery(hqlQuery);\r\n        query.setParameter(\"pRunMonth\", pRunMonth);\r\n        query.setParameter(\"pRunYear\", pRunYear);\r\n        query.setParameter(\"pBusClientIdVar\", pBusClientId);\r\n\r\n        wRetVal = (ArrayList) query.list();\r\n\r\n        if (wRetVal.size() > 0) {\r\n            for (Object[] o : wRetVal) {\r\n                int i = 0;\r\n                EmployeePayBean p = new EmployeePayBean();\r\n                p.setId((Long) o[i++]);\r\n                p.setObjectInd((int)o[i++]);\r\n                p.setRent(((Double) o[i++]));\r\n                p.setTransport(((Double) o[i++]));\r\n                p.setInducement(((Double) o[i++]));\r\n                p.setHazard(((Double) o[i++]));\r\n                p.setCallDuty(((Double) o[i++]));\r\n                p.setOtherAllowance(((Double) o[i++]));\r\n                p.setTaxesPaid(((Double) o[i++]));\r\n                p.setMonthlyTax(p.getTaxesPaid());\r\n                p.setUnionDues(((Double) o[i++]));\r\n                p.setNhf(((Double) o[i++]));\r\n                p.setTotalGarnishments(((Double) o[i++]));\r\n                p.setTotalPay(((Double) o[i++]));\r\n                p.setNetPay(((Double) o[i++]));\r\n                Employee e = new Employee((Long) o[i++], (String) o[i++], (String) o[i++], o[i++]);\r\n                SalaryInfo s = new SalaryInfo((Long) o[i++]);\r\n                e.setSalaryInfo(s);\r\n                e.setRank((Rank) o[i++]);\r\n                e.setEmployeeId((String) o[i++]);\r\n                p.setMdaDeptMap(new MdaDeptMap((Long) o[i++]));\r\n                p.getMdaDeptMap().setMdaInfo(new MdaInfo((Long) o[i++], (String) o[i++], (String) o[i++]));\r\n\r\n                p.setTws(((Double) o[i++]));\r\n\r\n                p.setPrincipalAllowance(((Double) o[i++]));\r\n                p.setMeal(((Double) o[i++]));\r\n                p.setUtility(((Double) o[i++]));\r\n                p.setRuralPosting(((Double) o[i++]));\r\n                p.setJournal(((Double) o[i++]));\r\n                p.setDomesticServant(((Double) o[i++]));\r\n                p.setDriversAllowance(((Double) o[i++]));\r\n                p.setAdminAllowance(((Double) o[i++]));\r\n                p.setEntertainment(((Double) o[i++]));\r\n                p.setAcademicAllowance(((Double) o[i++]));\r\n                p.setTss(((Double) o[i++]));\r\n                p.setArrears(((Double) o[i++]));\r\n                p.setOtherArrears(((Double) o[i++]));\r\n                p.setSalaryDifference(((Double) o[i++]));\r\n                p.setSpecialAllowance(((Double) o[i++]));\r\n                p.setContractAllowance(((Double) o[i++]));\r\n                p.setTotalDeductions(((Double) o[i++]));\r\n                p.setFurniture(((Double) o[i++]));\r\n                p.setDevelopmentLevy(((Double) o[i++]));\r\n                p.setContributoryPension(((Double) o[i++]));\r\n                p.setNoOfDays(((Integer) o[i++]).intValue());\r\n                p.setPayByDaysInd(((Integer) o[i++]).intValue());\r\n                Object wObj = o[i++];\r\n                if (wObj != null)\r\n                    e.setSchoolInfo(new SchoolInfo((Long) wObj));\r\n                else {\r\n                    e.setSchoolInfo(new SchoolInfo());\r\n                }\r\n                wObj = o[i++];\r\n                if (wObj != null)\r\n                    p.setAccountNumber((String) wObj);\r\n                else {\r\n                    p.setAccountNumber(\"N/A\");\r\n                }\r\n                p.setBranchName((String) o[i++]);\r\n\r\n                p.setBranchSortCode((String) o[i++]);\r\n                p.setTotalAllowance(((Double) o[i++]));\r\n                p.setEmployeeType(new EmployeeType((Long) o[i++]));\r\n                p.setMonthlyBasic((Double) o[i++]);\r\n                p.setSalaryInfo(s);\r\n                p.setEmployee(e);\r\n\r\n                wRetList.add(p);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return wRetList;\r\n\r\n    }\r\n\r\n    public List<EmployeePayBean> loadAllBizClientEmployeePayBeanByParentIdFromDateToDate(int pRunMonth, int pRunYear) {\r\n        ArrayList<Object[]> wRetVal = new ArrayList<Object[]>();\r\n        List wRetList = new ArrayList();\r\n\r\n\r\n        String query = \"SELECT * FROM (SELECT DISTINCT p.paychecks_inst_id as Id, p.rent as Rent,p.transport as Transport,p.inducement as Inducement,p.hazard as Hazard,p.call_duty as callDuty,p.other_allowance as OtherAllowance,\" +\r\n                \"p.taxes_paid as TaxesPaid,p.union_dues as UnionDues,p.nhf as NHF,p.total_garnishments as totalGarnishments,p.total_pay as totalPay,p.net_pay as netPay, e.employee_inst_id as EID, \" +\r\n                \" e.first_name as firstName, e.last_name as lastName, e.initials as Initials, p.salary_info_inst_id as SID, e.employee_id as employeeId,\" +\r\n                \"p.mda_dept_map_inst_id as mdaDeptMap, mda.mda_inst_id as mdaId,mda.name as Name,mda.code_name as codeName,\" +\r\n                \"p.tws as TWS,p.principal_allowance as principalAllowance, p.meal as Meal,p.utility as Utility,p.rural_posting as RuralPosting,\" +\r\n                \"p.journal as Journal,p.domestic_servant as domesticServant,p.drivers_allowance as driversAllowance,p.admin_allowance as adminAllowance,p.entertainment as Entertainment,\" +\r\n                \"p.academic_allowance as academicAllowance,p.tss as TSS,p.arrears as Arrears,p.other_arrears as otherArrears,p.salary_difference as salaryDifference,\" +\r\n                \"p.special_allowance as specialAllowance,p.contract_allowance as contractAllowance,p.total_deductions as totalDeductions,p.furniture as Furniture,p.development_levy as developmentLevy, \" +\r\n                \"p.contributory_pension as contributoryPension,p.no_of_days as noOfDays,p.pay_by_days_ind as payByDaysInd,p.school_inst_id as SchoolInfoId,p.account_number as accountNumber,b.branch_name as branchName,\" +\r\n                \"b.branch_id as branchSortCode,p.total_allowance as totalAllowance,p.employee_type_inst_id as employeeTypeId,p.monthly_basic as monthlyBasic, bc.name as ClientName, bc.business_client_inst_id as ClientId from ippms_paychecks_info p, ippms_employee e,\" +\r\n                \"ippms_bank_branches b, ippms_mda_info mda, ippms_mda_dept_map m, ippms_client bc where e.employee_inst_id = p.employee_inst_id and p.run_month = :pRunMonth \" +\r\n                \"and p.run_year = :pRunYear and b.branch_inst_id = p.branch_inst_id and p.mda_dept_map_inst_id = m.mda_dept_map_inst_id and m.mda_inst_id = mda.mda_inst_id \" +\r\n                \"and p.business_client_inst_id = bc.business_client_inst_id and p.net_pay > 0\"\r\n                + \"UNION \"\r\n                + \"SELECT DISTINCT p.paychecks_inst_id as Id, p.rent as Rent,p.transport as Transport,p.inducement as Inducement,p.hazard as Hazard,p.call_duty as callDuty,p.other_allowance as OtherAllowance,\" +\r\n                \"p.taxes_paid as TaxesPaid,p.union_dues as UnionDues,p.nhf as NHF,p.total_garnishments as totalGarnishments,p.total_pay as totalPay,p.net_pay as netPay, e.employee_inst_id as EID, \" +\r\n                \" e.first_name as firstName, e.last_name as lastName, e.initials as Initials, p.salary_info_inst_id as SID, e.employee_id as employeeId,\" +\r\n                \"p.mda_dept_map_inst_id as mdaDeptMap, mda.mda_inst_id as mdaId,mda.name as Name,mda.code_name as codeName,\" +\r\n                \"p.tws as TWS,p.principal_allowance as principalAllowance, p.meal as Meal,p.utility as Utility,p.rural_posting as RuralPosting,\" +\r\n                \"p.journal as Journal,p.domestic_servant as domesticServant,p.drivers_allowance as driversAllowance,p.admin_allowance as adminAllowance,p.entertainment as Entertainment,\" +\r\n                \"p.academic_allowance as academicAllowance,p.tss as TSS,p.arrears as Arrears,p.other_arrears as otherArrears,p.salary_difference as salaryDifference,\" +\r\n                \"p.special_allowance as specialAllowance,p.contract_allowance as contractAllowance,p.total_deductions as totalDeductions,p.furniture as Furniture,p.development_levy as developmentLevy, \" +\r\n                \"p.contributory_pension as contributoryPension,p.no_of_days as noOfDays,p.pay_by_days_ind as payByDaysInd,p.school_inst_id as SchoolInfoId,p.account_number as accountNumber,b.branch_name as branchName,\" +\r\n                \"b.branch_id as branchSortCode,p.total_allowance as totalAllowance,p.employee_type_inst_id as employeeTypeId,p.monthly_basic as monthlyBasic, bc.name as ClientName, bc.business_client_inst_id as ClientId from ippms_paychecks_lg_info p, ippms_employee e,\" +\r\n                \"ippms_bank_branches b, ippms_mda_info mda, ippms_mda_dept_map m, ippms_client bc where e.employee_inst_id = p.employee_inst_id and p.run_month = :pRunMonth \" +\r\n                \"and p.run_year = :pRunYear and b.branch_inst_id = p.branch_inst_id and p.mda_dept_map_inst_id = m.mda_dept_map_inst_id and m.mda_inst_id = mda.mda_inst_id \" +\r\n                \"and p.business_client_inst_id = bc.business_client_inst_id and p.net_pay > 0\"\r\n                + \" UNION \"\r\n                + \"SELECT DISTINCT p.paychecks_inst_id as Id, p.rent as Rent,p.transport as Transport,p.inducement as Inducement,p.hazard as Hazard,p.call_duty as callDuty,p.other_allowance as OtherAllowance,\" +\r\n                \"p.taxes_paid as TaxesPaid,p.union_dues as UnionDues,p.nhf as NHF,p.total_garnishments as totalGarnishments,p.total_pay as totalPay,p.net_pay as netPay, e.pensioner_inst_id as EID, \" +\r\n                \" e.first_name as firstName, e.last_name as lastName, e.initials as Initials, p.salary_info_inst_id as SID, e.employee_id as employeeId,\" +\r\n                \"p.mda_dept_map_inst_id as mdaDeptMap, mda.mda_inst_id as mdaId,mda.name as Name,mda.code_name as codeName,\" +\r\n                \"p.tws as TWS,p.principal_allowance as principalAllowance, p.meal as Meal,p.utility as Utility,p.rural_posting as RuralPosting,\" +\r\n                \"p.journal as Journal,p.domestic_servant as domesticServant,p.drivers_allowance as driversAllowance,p.admin_allowance as adminAllowance,p.entertainment as Entertainment,\" +\r\n                \"p.academic_allowance as academicAllowance,p.tss as TSS,p.arrears as Arrears,p.other_arrears as otherArrears,p.salary_difference as salaryDifference,\" +\r\n                \"p.special_allowance as specialAllowance,p.contract_allowance as contractAllowance,p.total_deductions as totalDeductions,p.furniture as Furniture,p.development_levy as developmentLevy, \" +\r\n                \"p.contributory_pension as contributoryPension,p.no_of_days as noOfDays,p.pay_by_days_ind as payByDaysInd,p.school_inst_id as SchoolInfoId,p.account_number as accountNumber,b.branch_name as branchName,\" +\r\n                \"b.branch_id as branchSortCode,p.total_allowance as totalAllowance,p.employee_type_inst_id as employeeTypeId,p.monthly_basic as monthlyBasic, bc.name as ClientName, bc.business_client_inst_id as ClientId from ippms_paychecks_blgp_info p, ippms_pensioner e,\" +\r\n                \"ippms_bank_branches b, ippms_mda_info mda, ippms_mda_dept_map m, ippms_client bc where e.pensioner_inst_id = p.pensioner_inst_id and p.run_month = :pRunMonth \" +\r\n                \"and p.run_year = :pRunYear and b.branch_inst_id = p.branch_inst_id and p.mda_dept_map_inst_id = m.mda_dept_map_inst_id and m.mda_inst_id = mda.mda_inst_id \" +\r\n                \"and p.business_client_inst_id = bc.business_client_inst_id and p.net_pay > 0\"\r\n                +\" UNION \"\r\n                + \"SELECT DISTINCT p.paychecks_inst_id as Id, p.rent as Rent,p.transport as Transport,p.inducement as Inducement,p.hazard as Hazard,p.call_duty as callDuty,p.other_allowance as OtherAllowance,\" +\r\n                \"p.taxes_paid as TaxesPaid,p.union_dues as UnionDues,p.nhf as NHF,p.total_garnishments as totalGarnishments,p.total_pay as totalPay,p.net_pay as netPay, e.employee_inst_id as EID, \" +\r\n                \" e.first_name as firstName, e.last_name as lastName, e.initials as Initials, p.salary_info_inst_id as SID, e.employee_id as employeeId,\" +\r\n                \"p.mda_dept_map_inst_id as mdaDeptMap, mda.mda_inst_id as mdaId,mda.name as Name,mda.code_name as codeName,\" +\r\n                \"p.tws as TWS,p.principal_allowance as principalAllowance, p.meal as Meal,p.utility as Utility,p.rural_posting as RuralPosting,\" +\r\n                \"p.journal as Journal,p.domestic_servant as domesticServant,p.drivers_allowance as driversAllowance,p.admin_allowance as adminAllowance,p.entertainment as Entertainment,\" +\r\n                \"p.academic_allowance as academicAllowance,p.tss as TSS,p.arrears as Arrears,p.other_arrears as otherArrears,p.salary_difference as salaryDifference,\" +\r\n                \"p.special_allowance as specialAllowance,p.contract_allowance as contractAllowance,p.total_deductions as totalDeductions,p.furniture as Furniture,p.development_levy as developmentLevy, \" +\r\n                \"p.contributory_pension as contributoryPension,p.no_of_days as noOfDays,p.pay_by_days_ind as payByDaysInd,p.school_inst_id as SchoolInfoId,p.account_number as accountNumber,b.branch_name as branchName,\" +\r\n                \"b.branch_id as branchSortCode,p.total_allowance as totalAllowance,p.employee_type_inst_id as employeeTypeId,p.monthly_basic as monthlyBasic, bc.name as ClientName, bc.business_client_inst_id as ClientId from ippms_paychecks_subeb_info p, ippms_employee e,\" +\r\n                \"ippms_bank_branches b, ippms_mda_info mda, ippms_mda_dept_map m, ippms_client bc where e.employee_inst_id = p.employee_inst_id and p.run_month = :pRunMonth \" +\r\n                \"and p.run_year = :pRunYear and b.branch_inst_id = p.branch_inst_id and p.mda_dept_map_inst_id = m.mda_dept_map_inst_id and m.mda_inst_id = mda.mda_inst_id \" +\r\n                \"and p.business_client_inst_id = bc.business_client_inst_id and p.net_pay > 0\"\r\n                +\" UNION \"\r\n                + \"SELECT DISTINCT p.paychecks_inst_id as Id, p.rent as Rent,p.transport as Transport,p.inducement as Inducement,p.hazard as Hazard,p.call_duty as callDuty,p.other_allowance as OtherAllowance,\" +\r\n                \"p.taxes_paid as TaxesPaid,p.union_dues as UnionDues,p.nhf as NHF,p.total_garnishments as totalGarnishments,p.total_pay as totalPay,p.net_pay as netPay, e.pensioner_inst_id as EID, \" +\r\n                \" e.first_name as firstName, e.last_name as lastName, e.initials as Initials, p.salary_info_inst_id as SID, e.employee_id as employeeId,\" +\r\n                \"p.mda_dept_map_inst_id as mdaDeptMap, mda.mda_inst_id as mdaId,mda.name as Name,mda.code_name as codeName,\" +\r\n                \"p.tws as TWS,p.principal_allowance as principalAllowance, p.meal as Meal,p.utility as Utility,p.rural_posting as RuralPosting,\" +\r\n                \"p.journal as Journal,p.domestic_servant as domesticServant,p.drivers_allowance as driversAllowance,p.admin_allowance as adminAllowance,p.entertainment as Entertainment,\" +\r\n                \"p.academic_allowance as academicAllowance,p.tss as TSS,p.arrears as Arrears,p.other_arrears as otherArrears,p.salary_difference as salaryDifference,\" +\r\n                \"p.special_allowance as specialAllowance,p.contract_allowance as contractAllowance,p.total_deductions as totalDeductions,p.furniture as Furniture,p.development_levy as developmentLevy, \" +\r\n                \"p.contributory_pension as contributoryPension,p.no_of_days as noOfDays,p.pay_by_days_ind as payByDaysInd,p.school_inst_id as SchoolInfoId,p.account_number as accountNumber,b.branch_name as branchName,\" +\r\n                \"b.branch_id as branchSortCode,p.total_allowance as totalAllowance,p.employee_type_inst_id as employeeTypeId,p.monthly_basic as monthlyBasic, bc.name as ClientName, bc.business_client_inst_id as ClientId from ippms_paychecks_pension_info p, ippms_pensioner e,\" +\r\n                \"ippms_bank_branches b, ippms_mda_info mda, ippms_mda_dept_map m, ippms_client bc where e.pensioner_inst_id = p.pensioner_inst_id and p.run_month = :pRunMonth \" +\r\n                \"and p.run_year = :pRunYear and b.branch_inst_id = p.branch_inst_id and p.mda_dept_map_inst_id = m.mda_dept_map_inst_id and m.mda_inst_id = mda.mda_inst_id \" +\r\n                \"and p.business_client_inst_id = bc.business_client_inst_id and p.net_pay > 0) AS foo\";\r\n\r\n\r\n        List<Object[]> rows = makeSQLQuery(query)\r\n                .addScalar(\"Id\", StandardBasicTypes.LONG)\r\n                .addScalar(\"Rent\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"Transport\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"Inducement\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"Hazard\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"callDuty\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"OtherAllowance\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"TaxesPaid\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"UnionDues\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"NHF\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"totalGarnishments\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"totalPay\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"netPay\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"EID\", StandardBasicTypes.LONG)\r\n                .addScalar(\"firstName\", StandardBasicTypes.STRING)\r\n                .addScalar(\"lastName\", StandardBasicTypes.STRING)\r\n                .addScalar(\"Initials\", StandardBasicTypes.STRING)\r\n                .addScalar(\"SID\", StandardBasicTypes.LONG)\r\n                .addScalar(\"employeeId\", StandardBasicTypes.STRING)\r\n                .addScalar(\"mdaDeptMap\", StandardBasicTypes.LONG)\r\n                .addScalar(\"mdaId\", StandardBasicTypes.LONG)\r\n                .addScalar(\"Name\", StandardBasicTypes.STRING)\r\n                .addScalar(\"codeName\", StandardBasicTypes.STRING)\r\n                .addScalar(\"TWS\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"principalAllowance\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"Meal\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"Utility\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"RuralPosting\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"Journal\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"domesticServant\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"driversAllowance\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"adminAllowance\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"Entertainment\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"academicAllowance\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"TSS\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"Arrears\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"otherArrears\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"salaryDifference\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"specialAllowance\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"contractAllowance\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"totalDeductions\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"Furniture\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"developmentLevy\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"contributoryPension\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"noOfDays\", StandardBasicTypes.INTEGER)\r\n                .addScalar(\"payByDaysInd\", StandardBasicTypes.INTEGER)\r\n                .addScalar(\"SchoolInfoId\", StandardBasicTypes.LONG)\r\n                .addScalar(\"accountNumber\", StandardBasicTypes.STRING)\r\n                .addScalar(\"branchName\", StandardBasicTypes.STRING)\r\n                .addScalar(\"branchSortCode\", StandardBasicTypes.STRING)\r\n                .addScalar(\"totalAllowance\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"employeeTypeId\", StandardBasicTypes.LONG)\r\n                .addScalar(\"monthlyBasic\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"clientName\", StandardBasicTypes.STRING)\r\n                .addScalar(\"clientId\", StandardBasicTypes.LONG)\r\n                .setParameter(\"pRunMonth\", pRunMonth)\r\n                .setParameter(\"pRunYear\", pRunYear)\r\n                .list();\r\n\r\n        if (rows.size() > 0) {\r\n            for (Object[] o : rows) {\r\n                int i = 0;\r\n                EmployeePayBean p = new EmployeePayBean();\r\n                p.setId((Long) o[i++]);\r\n//                p.setObjectInd((int)o[i++]);\r\n                p.setRent(((Double) o[i++]));\r\n                p.setTransport(((Double) o[i++]));\r\n                p.setInducement(((Double) o[i++]));\r\n                p.setHazard(((Double) o[i++]));\r\n                p.setCallDuty(((Double) o[i++]));\r\n                p.setOtherAllowance(((Double) o[i++]));\r\n                p.setTaxesPaid(((Double) o[i++]));\r\n                p.setMonthlyTax(p.getTaxesPaid());\r\n                p.setUnionDues(((Double) o[i++]));\r\n                p.setNhf(((Double) o[i++]));\r\n                p.setTotalGarnishments(((Double) o[i++]));\r\n                p.setTotalPay(((Double) o[i++]));\r\n                p.setNetPay(((Double) o[i++]));\r\n                Employee e = new Employee((Long) o[i++], (String) o[i++], (String) o[i++], o[i++]);\r\n                SalaryInfo s = new SalaryInfo((Long) o[i++]);\r\n                e.setSalaryInfo(s);\r\n//                e.setRank((Rank) o[i++]);\r\n                e.setEmployeeId((String) o[i++]);\r\n                p.setMdaDeptMap(new MdaDeptMap((Long) o[i++]));\r\n                p.getMdaDeptMap().setMdaInfo(new MdaInfo((Long) o[i++], (String) o[i++], (String) o[i++]));\r\n\r\n                p.setTws(((Double) o[i++]));\r\n\r\n                p.setPrincipalAllowance(((Double) o[i++]));\r\n                p.setMeal(((Double) o[i++]));\r\n                p.setUtility(((Double) o[i++]));\r\n                p.setRuralPosting(((Double) o[i++]));\r\n                p.setJournal(((Double) o[i++]));\r\n                p.setDomesticServant(((Double) o[i++]));\r\n                p.setDriversAllowance(((Double) o[i++]));\r\n                p.setAdminAllowance(((Double) o[i++]));\r\n                p.setEntertainment(((Double) o[i++]));\r\n                p.setAcademicAllowance(((Double) o[i++]));\r\n                p.setTss(((Double) o[i++]));\r\n                p.setArrears(((Double) o[i++]));\r\n                p.setOtherArrears(((Double) o[i++]));\r\n                p.setSalaryDifference(((Double) o[i++]));\r\n                p.setSpecialAllowance(((Double) o[i++]));\r\n                p.setContractAllowance(((Double) o[i++]));\r\n                p.setTotalDeductions(((Double) o[i++]));\r\n                p.setFurniture(((Double) o[i++]));\r\n                p.setDevelopmentLevy(((Double) o[i++]));\r\n                p.setContributoryPension(((Double) o[i++]));\r\n                p.setNoOfDays(((Integer) o[i++]).intValue());\r\n                p.setPayByDaysInd(((Integer) o[i++]).intValue());\r\n                Object wObj = o[i++];\r\n                if (wObj != null)\r\n                    e.setSchoolInfo(new SchoolInfo((Long) wObj));\r\n                else {\r\n                    e.setSchoolInfo(new SchoolInfo());\r\n                }\r\n                wObj = o[i++];\r\n                if (wObj != null)\r\n                    p.setAccountNumber((String) wObj);\r\n                else {\r\n                    p.setAccountNumber(\"N/A\");\r\n                }\r\n                p.setBranchName((String) o[i++]);\r\n\r\n                p.setBranchSortCode((String) o[i++]);\r\n                p.setTotalAllowance(((Double) o[i++]));\r\n                p.setEmployeeType(new EmployeeType((Long) o[i++]));\r\n                p.setMonthlyBasic((Double) o[i++]);\r\n                p.setSalaryInfo(s);\r\n                p.setEmployee(e);\r\n                p.setBusinessClientName((String)o[i++]);\r\n                p.setBusinessClientId((Long)o[i++]);\r\n\r\n                wRetList.add(p);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return wRetList;\r\n\r\n    }\r\n    public NativeQuery makeSQLQuery(String query)  {\r\n        return this.genericService.getCurrentSession().createNativeQuery(query);\r\n    }\r\n\r\n\r\n    public List<EmployeePayBean> loadAllExecEmployeePayBeanByParentIdFromDateToDate(Long pBusClientId, int pRunMonth, int pRunYear, BusinessCertificate bc) {\r\n        ArrayList<Object[]> wRetVal = new ArrayList<Object[]>();\r\n        List wRetList = new ArrayList();\r\n\r\n        String query = \"SELECT * FROM (SELECT DISTINCT p.paychecks_inst_id as Id, p.rent as Rent,p.transport as Transport,p.inducement as Inducement,p.hazard as Hazard,p.call_duty as callDuty,p.other_allowance as OtherAllowance,\" +\r\n                \"p.taxes_paid as TaxesPaid,p.union_dues as UnionDues,p.nhf as NHF,p.total_garnishments as totalGarnishments,p.total_pay as totalPay,p.net_pay as netPay, e.employee_inst_id as EID, \" +\r\n                \" e.first_name as firstName, e.last_name as lastName, e.initials as Initials, p.salary_info_inst_id as SID, e.employee_id as employeeId,\" +\r\n                \"p.mda_dept_map_inst_id as mdaDeptMap, mda.mda_inst_id as mdaId,mda.name as Name,mda.code_name as codeName,\" +\r\n                \"p.tws as TWS,p.principal_allowance as principalAllowance, p.meal as Meal,p.utility as Utility,p.rural_posting as RuralPosting,\" +\r\n                \"p.journal as Journal,p.domestic_servant as domesticServant,p.drivers_allowance as driversAllowance,p.admin_allowance as adminAllowance,p.entertainment as Entertainment,\" +\r\n                \"p.academic_allowance as academicAllowance,p.tss as TSS,p.arrears as Arrears,p.other_arrears as otherArrears,p.salary_difference as salaryDifference,\" +\r\n                \"p.special_allowance as specialAllowance,p.contract_allowance as contractAllowance,p.total_deductions as totalDeductions,p.furniture as Furniture,p.development_levy as developmentLevy, \" +\r\n                \"p.contributory_pension as contributoryPension,p.no_of_days as noOfDays,p.pay_by_days_ind as payByDaysInd,p.school_inst_id as SchoolInfoId,p.account_number as accountNumber,b.branch_name as branchName,\" +\r\n                \"b.branch_id as branchSortCode,p.total_allowance as totalAllowance,p.employee_type_inst_id as employeeTypeId,p.monthly_basic as monthlyBasic, bc.name as ClientName, bc.business_client_inst_id as ClientId from ippms_paychecks_info p, ippms_employee e,\" +\r\n                \"ippms_bank_branches b, ippms_mda_info mda, ippms_mda_dept_map m, ippms_client bc where e.employee_inst_id = p.employee_inst_id and p.run_month = :pRunMonth \" +\r\n                \"and p.run_year = :pRunYear and b.branch_inst_id = p.branch_inst_id and p.mda_dept_map_inst_id = m.mda_dept_map_inst_id and m.mda_inst_id = mda.mda_inst_id \" +\r\n                \"and p.business_client_inst_id = bc.business_client_inst_id and p.net_pay > 0\"\r\n                + \" UNION \"\r\n                + \"SELECT DISTINCT p.paychecks_inst_id as Id, p.rent as Rent,p.transport as Transport,p.inducement as Inducement,p.hazard as Hazard,p.call_duty as callDuty,p.other_allowance as OtherAllowance,\" +\r\n                \"p.taxes_paid as TaxesPaid,p.union_dues as UnionDues,p.nhf as NHF,p.total_garnishments as totalGarnishments,p.total_pay as totalPay,p.net_pay as netPay, e.employee_inst_id as EID, \" +\r\n                \" e.first_name as firstName, e.last_name as lastName, e.initials as Initials, p.salary_info_inst_id as SID, e.employee_id as employeeId,\" +\r\n                \"p.mda_dept_map_inst_id as mdaDeptMap, mda.mda_inst_id as mdaId,mda.name as Name,mda.code_name as codeName,\" +\r\n                \"p.tws as TWS,p.principal_allowance as principalAllowance, p.meal as Meal,p.utility as Utility,p.rural_posting as RuralPosting,\" +\r\n                \"p.journal as Journal,p.domestic_servant as domesticServant,p.drivers_allowance as driversAllowance,p.admin_allowance as adminAllowance,p.entertainment as Entertainment,\" +\r\n                \"p.academic_allowance as academicAllowance,p.tss as TSS,p.arrears as Arrears,p.other_arrears as otherArrears,p.salary_difference as salaryDifference,\" +\r\n                \"p.special_allowance as specialAllowance,p.contract_allowance as contractAllowance,p.total_deductions as totalDeductions,p.furniture as Furniture,p.development_levy as developmentLevy, \" +\r\n                \"p.contributory_pension as contributoryPension,p.no_of_days as noOfDays,p.pay_by_days_ind as payByDaysInd,p.school_inst_id as SchoolInfoId,p.account_number as accountNumber,b.branch_name as branchName,\" +\r\n                \"b.branch_id as branchSortCode,p.total_allowance as totalAllowance,p.employee_type_inst_id as employeeTypeId,p.monthly_basic as monthlyBasic, bc.name as ClientName, bc.business_client_inst_id as ClientId from ippms_paychecks_lg_info p, ippms_employee e,\" +\r\n                \"ippms_bank_branches b, ippms_mda_info mda, ippms_mda_dept_map m, ippms_client bc where e.employee_inst_id = p.employee_inst_id and p.run_month = :pRunMonth \" +\r\n                \"and p.run_year = :pRunYear and b.branch_inst_id = p.branch_inst_id and p.mda_dept_map_inst_id = m.mda_dept_map_inst_id and m.mda_inst_id = mda.mda_inst_id \" +\r\n                \"and p.business_client_inst_id = bc.business_client_inst_id and p.net_pay > 0\"\r\n                + \" UNION \"\r\n                + \"SELECT DISTINCT p.paychecks_inst_id as Id, p.rent as Rent,p.transport as Transport,p.inducement as Inducement,p.hazard as Hazard,p.call_duty as callDuty,p.other_allowance as OtherAllowance,\" +\r\n                \"p.taxes_paid as TaxesPaid,p.union_dues as UnionDues,p.nhf as NHF,p.total_garnishments as totalGarnishments,p.total_pay as totalPay,p.net_pay as netPay, e.pensioner_inst_id as EID, \" +\r\n                \" e.first_name as firstName, e.last_name as lastName, e.initials as Initials, p.salary_info_inst_id as SID, e.employee_id as employeeId,\" +\r\n                \"p.mda_dept_map_inst_id as mdaDeptMap, mda.mda_inst_id as mdaId,mda.name as Name,mda.code_name as codeName,\" +\r\n                \"p.tws as TWS,p.principal_allowance as principalAllowance, p.meal as Meal,p.utility as Utility,p.rural_posting as RuralPosting,\" +\r\n                \"p.journal as Journal,p.domestic_servant as domesticServant,p.drivers_allowance as driversAllowance,p.admin_allowance as adminAllowance,p.entertainment as Entertainment,\" +\r\n                \"p.academic_allowance as academicAllowance,p.tss as TSS,p.arrears as Arrears,p.other_arrears as otherArrears,p.salary_difference as salaryDifference,\" +\r\n                \"p.special_allowance as specialAllowance,p.contract_allowance as contractAllowance,p.total_deductions as totalDeductions,p.furniture as Furniture,p.development_levy as developmentLevy, \" +\r\n                \"p.contributory_pension as contributoryPension,p.no_of_days as noOfDays,p.pay_by_days_ind as payByDaysInd,p.school_inst_id as SchoolInfoId,p.account_number as accountNumber,b.branch_name as branchName,\" +\r\n                \"b.branch_id as branchSortCode,p.total_allowance as totalAllowance,p.employee_type_inst_id as employeeTypeId,p.monthly_basic as monthlyBasic, bc.name as ClientName, bc.business_client_inst_id as ClientId from ippms_paychecks_blgp_info p, ippms_pensioner e,\" +\r\n                \"ippms_bank_branches b, ippms_mda_info mda, ippms_mda_dept_map m, ippms_client bc where e.pensioner_inst_id = p.pensioner_inst_id and p.run_month = :pRunMonth \" +\r\n                \"and p.run_year = :pRunYear and b.branch_inst_id = p.branch_inst_id and p.mda_dept_map_inst_id = m.mda_dept_map_inst_id and m.mda_inst_id = mda.mda_inst_id \" +\r\n                \"and p.business_client_inst_id = bc.business_client_inst_id and p.net_pay > 0\"\r\n                +\" UNION \"\r\n                + \"SELECT DISTINCT p.paychecks_inst_id as Id, p.rent as Rent,p.transport as Transport,p.inducement as Inducement,p.hazard as Hazard,p.call_duty as callDuty,p.other_allowance as OtherAllowance,\" +\r\n                \"p.taxes_paid as TaxesPaid,p.union_dues as UnionDues,p.nhf as NHF,p.total_garnishments as totalGarnishments,p.total_pay as totalPay,p.net_pay as netPay, e.employee_inst_id as EID, \" +\r\n                \" e.first_name as firstName, e.last_name as lastName, e.initials as Initials, p.salary_info_inst_id as SID, e.employee_id as employeeId,\" +\r\n                \"p.mda_dept_map_inst_id as mdaDeptMap, mda.mda_inst_id as mdaId,mda.name as Name,mda.code_name as codeName,\" +\r\n                \"p.tws as TWS,p.principal_allowance as principalAllowance, p.meal as Meal,p.utility as Utility,p.rural_posting as RuralPosting,\" +\r\n                \"p.journal as Journal,p.domestic_servant as domesticServant,p.drivers_allowance as driversAllowance,p.admin_allowance as adminAllowance,p.entertainment as Entertainment,\" +\r\n                \"p.academic_allowance as academicAllowance,p.tss as TSS,p.arrears as Arrears,p.other_arrears as otherArrears,p.salary_difference as salaryDifference,\" +\r\n                \"p.special_allowance as specialAllowance,p.contract_allowance as contractAllowance,p.total_deductions as totalDeductions,p.furniture as Furniture,p.development_levy as developmentLevy, \" +\r\n                \"p.contributory_pension as contributoryPension,p.no_of_days as noOfDays,p.pay_by_days_ind as payByDaysInd,p.school_inst_id as SchoolInfoId,p.account_number as accountNumber,b.branch_name as branchName,\" +\r\n                \"b.branch_id as branchSortCode,p.total_allowance as totalAllowance,p.employee_type_inst_id as employeeTypeId,p.monthly_basic as monthlyBasic, bc.name as ClientName, bc.business_client_inst_id as ClientId from ippms_paychecks_subeb_info p, ippms_employee e,\" +\r\n                \"ippms_bank_branches b, ippms_mda_info mda, ippms_mda_dept_map m, ippms_client bc where e.employee_inst_id = p.employee_inst_id and p.run_month = :pRunMonth \" +\r\n                \"and p.run_year = :pRunYear and b.branch_inst_id = p.branch_inst_id and p.mda_dept_map_inst_id = m.mda_dept_map_inst_id and m.mda_inst_id = mda.mda_inst_id \" +\r\n                \"and p.business_client_inst_id = bc.business_client_inst_id and p.net_pay > 0\"\r\n                +\" UNION \"\r\n                + \"SELECT DISTINCT p.paychecks_inst_id as Id, p.rent as Rent,p.transport as Transport,p.inducement as Inducement,p.hazard as Hazard,p.call_duty as callDuty,p.other_allowance as OtherAllowance,\" +\r\n                \"p.taxes_paid as TaxesPaid,p.union_dues as UnionDues,p.nhf as NHF,p.total_garnishments as totalGarnishments,p.total_pay as totalPay,p.net_pay as netPay, e.pensioner_inst_id as EID, \" +\r\n                \" e.first_name as firstName, e.last_name as lastName, e.initials as Initials, p.salary_info_inst_id as SID, e.employee_id as employeeId,\" +\r\n                \"p.mda_dept_map_inst_id as mdaDeptMap, mda.mda_inst_id as mdaId,mda.name as Name,mda.code_name as codeName,\" +\r\n                \"p.tws as TWS,p.principal_allowance as principalAllowance, p.meal as Meal,p.utility as Utility,p.rural_posting as RuralPosting,\" +\r\n                \"p.journal as Journal,p.domestic_servant as domesticServant,p.drivers_allowance as driversAllowance,p.admin_allowance as adminAllowance,p.entertainment as Entertainment,\" +\r\n                \"p.academic_allowance as academicAllowance,p.tss as TSS,p.arrears as Arrears,p.other_arrears as otherArrears,p.salary_difference as salaryDifference,\" +\r\n                \"p.special_allowance as specialAllowance,p.contract_allowance as contractAllowance,p.total_deductions as totalDeductions,p.furniture as Furniture,p.development_levy as developmentLevy, \" +\r\n                \"p.contributory_pension as contributoryPension,p.no_of_days as noOfDays,p.pay_by_days_ind as payByDaysInd,p.school_inst_id as SchoolInfoId,p.account_number as accountNumber,b.branch_name as branchName,\" +\r\n                \"b.branch_id as branchSortCode,p.total_allowance as totalAllowance,p.employee_type_inst_id as employeeTypeId,p.monthly_basic as monthlyBasic, bc.name as ClientName, bc.business_client_inst_id as ClientId from ippms_paychecks_pension_info p, ippms_pensioner e,\" +\r\n                \"ippms_bank_branches b, ippms_mda_info mda, ippms_mda_dept_map m, ippms_client bc where e.pensioner_inst_id = p.pensioner_inst_id and p.run_month = :pRunMonth \" +\r\n                \"and p.run_year = :pRunYear and b.branch_inst_id = p.branch_inst_id and p.mda_dept_map_inst_id = m.mda_dept_map_inst_id and m.mda_inst_id = mda.mda_inst_id \" +\r\n                \"and p.business_client_inst_id = bc.business_client_inst_id and p.net_pay > 0) AS foo\";\r\n\r\n\r\n        List<Object[]> rows = makeSQLQuery(query)\r\n                .addScalar(\"Id\", StandardBasicTypes.LONG)\r\n                .addScalar(\"Rent\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"Transport\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"Inducement\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"Hazard\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"callDuty\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"OtherAllowance\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"TaxesPaid\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"UnionDues\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"NHF\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"totalGarnishments\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"totalPay\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"netPay\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"EID\", StandardBasicTypes.LONG)\r\n                .addScalar(\"firstName\", StandardBasicTypes.STRING)\r\n                .addScalar(\"lastName\", StandardBasicTypes.STRING)\r\n                .addScalar(\"Initials\", StandardBasicTypes.STRING)\r\n                .addScalar(\"SID\", StandardBasicTypes.LONG)\r\n                .addScalar(\"employeeId\", StandardBasicTypes.STRING)\r\n                .addScalar(\"mdaDeptMap\", StandardBasicTypes.LONG)\r\n                .addScalar(\"mdaId\", StandardBasicTypes.LONG)\r\n                .addScalar(\"Name\", StandardBasicTypes.STRING)\r\n                .addScalar(\"codeName\", StandardBasicTypes.STRING)\r\n                .addScalar(\"TWS\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"principalAllowance\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"Meal\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"Utility\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"RuralPosting\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"Journal\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"domesticServant\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"driversAllowance\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"adminAllowance\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"Entertainment\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"academicAllowance\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"TSS\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"Arrears\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"otherArrears\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"salaryDifference\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"specialAllowance\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"contractAllowance\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"totalDeductions\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"Furniture\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"developmentLevy\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"contributoryPension\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"noOfDays\", StandardBasicTypes.INTEGER)\r\n                .addScalar(\"payByDaysInd\", StandardBasicTypes.INTEGER)\r\n                .addScalar(\"SchoolInfoId\", StandardBasicTypes.LONG)\r\n                .addScalar(\"accountNumber\", StandardBasicTypes.STRING)\r\n                .addScalar(\"branchName\", StandardBasicTypes.STRING)\r\n                .addScalar(\"branchSortCode\", StandardBasicTypes.STRING)\r\n                .addScalar(\"totalAllowance\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"employeeTypeId\", StandardBasicTypes.LONG)\r\n                .addScalar(\"monthlyBasic\", StandardBasicTypes.DOUBLE)\r\n                .addScalar(\"clientName\", StandardBasicTypes.STRING)\r\n                .addScalar(\"clientId\", StandardBasicTypes.LONG)\r\n                .setParameter(\"pRunMonth\", pRunMonth)\r\n                .setParameter(\"pRunYear\", pRunYear)\r\n                .list();\r\n\r\n\r\n        if (rows.size() > 0) {\r\n            for (Object[] o : rows) {\r\n                int i = 0;\r\n                EmployeePayBean p = new EmployeePayBean();\r\n                p.setId((Long) o[i++]);\r\n//                p.setObjectInd((int)o[i++]);\r\n                p.setRent(((Double) o[i++]));\r\n                p.setTransport(((Double) o[i++]));\r\n                p.setInducement(((Double) o[i++]));\r\n                p.setHazard(((Double) o[i++]));\r\n                p.setCallDuty(((Double) o[i++]));\r\n                p.setOtherAllowance(((Double) o[i++]));\r\n                p.setTaxesPaid(((Double) o[i++]));\r\n                p.setMonthlyTax(p.getTaxesPaid());\r\n                p.setUnionDues(((Double) o[i++]));\r\n                p.setNhf(((Double) o[i++]));\r\n                p.setTotalGarnishments(((Double) o[i++]));\r\n                p.setTotalPay(((Double) o[i++]));\r\n                p.setNetPay(((Double) o[i++]));\r\n                Employee e = new Employee((Long) o[i++], (String) o[i++], (String) o[i++], o[i++]);\r\n                SalaryInfo s = new SalaryInfo((Long) o[i++]);\r\n                e.setSalaryInfo(s);\r\n//                e.setRank((Rank) o[i++]);\r\n                e.setEmployeeId((String) o[i++]);\r\n                p.setMdaDeptMap(new MdaDeptMap((Long) o[i++]));\r\n                p.getMdaDeptMap().setMdaInfo(new MdaInfo((Long) o[i++], (String) o[i++], (String) o[i++]));\r\n\r\n                p.setTws(((Double) o[i++]));\r\n\r\n                p.setPrincipalAllowance(((Double) o[i++]));\r\n                p.setMeal(((Double) o[i++]));\r\n                p.setUtility(((Double) o[i++]));\r\n                p.setRuralPosting(((Double) o[i++]));\r\n                p.setJournal(((Double) o[i++]));\r\n                p.setDomesticServant(((Double) o[i++]));\r\n                p.setDriversAllowance(((Double) o[i++]));\r\n                p.setAdminAllowance(((Double) o[i++]));\r\n                p.setEntertainment(((Double) o[i++]));\r\n                p.setAcademicAllowance(((Double) o[i++]));\r\n                p.setTss(((Double) o[i++]));\r\n                p.setArrears(((Double) o[i++]));\r\n                p.setOtherArrears(((Double) o[i++]));\r\n                p.setSalaryDifference(((Double) o[i++]));\r\n                p.setSpecialAllowance(((Double) o[i++]));\r\n                p.setContractAllowance(((Double) o[i++]));\r\n                p.setTotalDeductions(((Double) o[i++]));\r\n                p.setFurniture(((Double) o[i++]));\r\n                p.setDevelopmentLevy(((Double) o[i++]));\r\n                p.setContributoryPension(((Double) o[i++]));\r\n                p.setNoOfDays(((Integer) o[i++]).intValue());\r\n                p.setPayByDaysInd(((Integer) o[i++]).intValue());\r\n                Object wObj = o[i++];\r\n                if (wObj != null)\r\n                    e.setSchoolInfo(new SchoolInfo((Long) wObj));\r\n                else {\r\n                    e.setSchoolInfo(new SchoolInfo());\r\n                }\r\n                wObj = o[i++];\r\n                if (wObj != null)\r\n                    p.setAccountNumber((String) wObj);\r\n                else {\r\n                    p.setAccountNumber(\"N/A\");\r\n                }\r\n                p.setBranchName((String) o[i++]);\r\n\r\n                p.setBranchSortCode((String) o[i++]);\r\n                p.setTotalAllowance(((Double) o[i++]));\r\n                p.setEmployeeType(new EmployeeType((Long) o[i++]));\r\n                p.setMonthlyBasic((Double) o[i++]);\r\n                p.setSalaryInfo(s);\r\n                p.setEmployee(e);\r\n                p.setBusinessClientName((String)o[i++]);\r\n                p.setBusinessClientId((Long)o[i++]);\r\n\r\n\r\n                wRetList.add(p);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return wRetList;\r\n\r\n    }\r\n\r\n    public NamedEntityBean loadEmployeePayBeanByParentIdFromDateToDateAndFilter(BusinessCertificate bc, int pRunMonth, int pRunYear, NamedEntityBean pNEB){\r\n\r\n\r\n        List<EmployeePayBean> wRetList = new ArrayList<EmployeePayBean>();\r\n\r\n\r\n        ArrayList<Object[]> wRetVal = new ArrayList<Object[]>();\r\n\r\n\r\n        String hqlQuery = \"\";\r\n\r\n\r\n        hqlQuery = \"select e.id,p.id, p.rent,p.transport,p.inducement,p.hazard,p.callDuty,p.otherAllowance,p.taxesPaid,p.unionDues,\" +\r\n                \"p.nhf,p.totalGarnishments,p.totalPay,p.netPay,p.status,p.payDate,p.payPeriodStart,p.payPeriodEnd,p.salaryInfo.id, \" +\r\n                \"e.firstName, e.lastName, e.initials, e.rank,e.employeeId,e.address1,e.city,e.city.state.id,e.zipCode,t.id,t.name, m.name,\" +\r\n                \"p.contributoryPension,e.schoolInfo.id,p.totalAllowance,p.accountNumber,b.name \" +\r\n                \" from \"+IppmsUtils.getPaycheckTableName(bc)+\" p, \"+IppmsUtils.getEmployeeTableName(bc)+\" e,MdaDeptMap a, MdaInfo m, Title t,BankBranch b, SalaryInfo s, SalaryType st \" +\r\n                \"where e.title.id = t.id and e.id = p.employee.id and e.mdaDeptMap.id = a.id and b.id = p.bankBranch.id \"+\r\n                \"and s.salaryType.id = st.id and s.id = p.salaryInfo.id \" +\r\n                \"and a.mdaInfo.id = m.id and p.runMonth = :pRunMonth and p.runYear = :pRunYear \";\r\n\r\n        if(pNEB.isSalaryType()) {\r\n            hqlQuery += \"and st.id = :pObjectIdVar \";\r\n            if(pNEB.getFromLevel() > 0 && pNEB.getToLevel() > 0) {\r\n                hqlQuery += \"and s.level >= :pFromLevelVar and s.level <= :pToLevelVar \";\r\n            }\r\n            else if(pNEB.getFromLevel() > 0 && pNEB.getToLevel() <= 0) {\r\n                hqlQuery += \"and s.level >= :pFromLevelVar \";\r\n            }\r\n        }else if(pNEB.isMdaType()) {\r\n\r\n            hqlQuery += \"and m.id = :pObjectIdVar \";\r\n        }else {\r\n            //Gotta be Employee...\r\n            hqlQuery += \"and e.id = :pObjectIdVar \";\r\n        }\r\n        Query query = this.sessionFactory.getCurrentSession().createQuery(hqlQuery);\r\n\r\n        query.setParameter(\"pRunMonth\", pRunMonth);\r\n        query.setParameter(\"pRunYear\", pRunYear);\r\n        if(pNEB.isSalaryType()) {\r\n\r\n            if(pNEB.getFromLevel() > 0  ) {\r\n                query.setParameter(\"pFromLevelVar\", pNEB.getFromLevel());\r\n            }\r\n            if(pNEB.getToLevel() > 0) {\r\n                query.setParameter(\"pToLevelVar\", pNEB.getToLevel());\r\n            }\r\n        }\r\n\r\n        query.setParameter(\"pObjectIdVar\", pNEB.getId());\r\n\r\n\r\n\r\n        wRetVal = (ArrayList)query.list();\r\n\r\n        if (wRetVal.size() > 0)\r\n        {\r\n            Long empId = null;\r\n            int i = 0;\r\n            for (Object[] o : wRetVal) {\r\n                empId = (Long)o[i++];\r\n                if(pNEB.getIdList().contains(empId)) {\r\n                    continue; //filter\r\n                    //Logic here is simple\r\n                    //Employees can meet multiple criteria of printing PaySlips e.g exist in Same MDA and PayGroup Combo.\r\n                }else {\r\n                    pNEB.getIdList().add(empId);\r\n                }\r\n                EmployeePayBean p = new EmployeePayBean();\r\n                p.setId((Long)o[i++]);\r\n                p.setRent(((Double)o[i++]));\r\n                p.setTransport(((Double)o[i++]));\r\n                p.setInducement(((Double)o[i++]));\r\n                p.setHazard(((Double)o[i++]));\r\n                p.setCallDuty(((Double)o[i++]));\r\n                p.setOtherAllowance(((Double)o[i++]));\r\n                p.setTaxesPaid(((Double)o[i++]));\r\n                p.setUnionDues(((Double)o[i++]));\r\n                p.setNhf(((Double)o[i++]));\r\n                p.setTotalGarnishments(((Double)o[i++]));\r\n                p.setTotalPay(((Double)o[i++]));\r\n                p.setNetPay(((Double)o[i++]));\r\n                p.setStatus((String)o[i++]);\r\n                p.setPayDate((LocalDate)o[i++]);\r\n                p.setPayPeriodStart((LocalDate)o[i++]);\r\n                p.setPayPeriodEnd((LocalDate)o[i++]);\r\n                SalaryInfo s = new SalaryInfo((Long)o[i++]);\r\n                Employee e = new Employee(empId, (String)o[i++], (String)o[i++],o[i++]);\r\n\r\n                e.setSalaryInfo(s);\r\n\r\n                e.setRank((Rank)o[i++]);\r\n                e.setEmployeeId((String)o[i++]);\r\n                e.setAddress1((String)o[i++]);\r\n                e.setCity((City)o[i++]);\r\n                e.setStateInstId((Long)o[i++]);\r\n                Object obj = o[i++];\r\n                if (null != obj)\r\n                    e.setZipCode((String)obj);\r\n                Title title = new Title((Long)o[i++], (String)o[i++]);\r\n                e.setTitle(title);\r\n                p.setEmployee(e);\r\n                p.setMda((String)o[i++]);\r\n                p.setContributoryPension(((Double)o[i++]));\r\n                obj = o[i++];\r\n                if (obj != null)\r\n                    e.setSchoolInfo(new SchoolInfo((Long) obj));\r\n\r\n                p.setTotalAllowance(((Double)o[i++]));\r\n                p.setAccountNumber((String)o[i++]);\r\n                p.setBranchName((String)o[i++]);\r\n\r\n\r\n                p.setSalaryInfo(s);\r\n                p.setEmployee(e);\r\n\r\n                wRetList.add(p);\r\n                i = 0;\r\n            }\r\n\r\n        }\r\n        pNEB.setEmpPayBeanList(wRetList);\r\n        return pNEB;\r\n\r\n    }\r\n\r\n  public BankPVSummaryBean loadEmployeePayBeanByFromDateToDateAndBank(LocalDate pSomeDate)\r\n    {\r\n        BankPVSummaryBean wRetMap = new BankPVSummaryBean();\r\n\r\n        String wSql = \"select e.employee.id,e.totalPay,e.totalDeductions,bb.id,bb.name,\" +\r\n                \"b.id, b.name from EmployeePayBean e, BankBranch bb, BankInfo b where \" +\r\n                \"e.runMonth = :pRunMonth and e.runYear = :pRunYear and \" +\r\n                \"bb.id = e.bankBranch.id and bb.bankInfo.id = b.id  and e.netPay > 0 order by e.id\";\r\n\r\n        Query query = this.sessionFactory.getCurrentSession().createQuery(wSql);\r\n        query.setParameter(\"pRunMonth\", pSomeDate.getMonthValue());\r\n        query.setParameter(\"pRunYear\", pSomeDate.getYear());\r\n\r\n        ArrayList<Object[]> wRetVal = (ArrayList<Object[]>)query.list();\r\n\r\n        if (wRetVal.size() > 0)\r\n        {\r\n            HashMap wBranchMap = new HashMap();\r\n            HashMap wBankInfoMap = new HashMap();\r\n\r\n            for (Object[] o : wRetVal)\r\n            {\r\n                double wTotalPay = ((Double)o[1]);\r\n                double wTotalDeduction = ((Double)o[2]);\r\n                double wNetPay = wTotalPay - wTotalDeduction;\r\n                Long wBranchId = (Long)o[3];\r\n                Long wBankId = (Long)o[5];\r\n                String wBranchName = (String)o[4];\r\n                String wBankName = (String)o[6];\r\n\r\n                wRetMap.setNetPay(wRetMap.getNetPay() + wNetPay);\r\n\r\n                if (wBranchMap.containsKey(wBranchId)) {\r\n                    BankBranch wBB = (BankBranch)wBranchMap.get(wBranchId);\r\n                    wBB.setBankId(wBankId);\r\n                    wBB.setTotalNetPay(wBB.getTotalNetPay() + wNetPay);\r\n                    wBranchMap.put(wBranchId, wBB);\r\n                }\r\n                else {\r\n                    BankBranch wBB = new BankBranch(wBranchId, wBranchName);\r\n                    wBB.setBankId(wBankId);\r\n                    wBB.setTotalNetPay(wBB.getTotalNetPay() + wNetPay);\r\n                    wBranchMap.put(wBranchId, wBB);\r\n                }\r\n\r\n                if (wBankInfoMap.containsKey(wBankId)) {\r\n                    BankInfo wBB = (BankInfo)wBankInfoMap.get(wBankId);\r\n                    wBB.setTotalNetPay(wBB.getTotalNetPay() + wNetPay);\r\n                    wBankInfoMap.put(wBankId, wBB);\r\n                }\r\n                else {\r\n                    BankInfo wBB = new BankInfo(wBankId, wBankName);\r\n                    wBB.setTotalNetPay(wBB.getTotalNetPay() + wNetPay);\r\n                    wBankInfoMap.put(wBankId, wBB);\r\n                }\r\n\r\n            }\r\n\r\n            wRetMap.setBankBranchMap(wBranchMap);\r\n            wRetMap.setBankInfoMap(wBankInfoMap);\r\n        }\r\n\r\n        return wRetMap;\r\n    }\r\n\r\n    public List<SalaryInfo> loadSalaryInfoBySalaryTypeId(Long pSalTypeId)\r\n    {\r\n        String sql = \"select distinct s.level,s.step\"\r\n                + \" from SalaryInfo s, SalaryType st where s.salaryType.id = st.id and \"\r\n                + \"st.id = :pSalTypeIdVar and st.deactivatedInd = 0\";\r\n\r\n        Query query = this.sessionFactory.getCurrentSession().createQuery(sql);\r\n\r\n        query.setParameter(\"pSalTypeIdVar\", pSalTypeId);\r\n\r\n        ArrayList<Object[]> wRetVal = new ArrayList<Object[]>();\r\n        ArrayList<SalaryInfo> wRetList = new ArrayList<SalaryInfo>();\r\n\r\n        wRetVal = (ArrayList<Object[]>)query.list();\r\n\r\n        if ((wRetVal != null) && (wRetVal.size() > 0))\r\n        {\r\n            for (Object[] o : wRetVal) {\r\n                SalaryInfo l = new SalaryInfo();\r\n\r\n                l.setLevel((Integer)o[0]);\r\n                l.setStep((Integer)o[1]);\r\n\r\n                wRetList.add(l);\r\n            }\r\n\r\n        }\r\n\r\n        return wRetList;\r\n    }\r\n\r\n\r\n    public List<NamedEntityBean> loadObjectIdAndNameByClassAndConditions(String pClassObject, int pObjType, String pAddendum, Long pBizId)\r\n    {\r\n        Objects.requireNonNull(pClassObject);\r\n\r\n        String wHql = \"select distinct id,name from \" + pClassObject;\r\n\r\n        if(!StringUtils.trimToEmpty(pAddendum).isEmpty()) {\r\n            wHql += \" \"+pAddendum;\r\n        }\r\n\r\n\r\n        Query wQuery = this.sessionFactory.getCurrentSession().createQuery((wHql));\r\n        wQuery.setParameter(\"pBizIdVar\", pBizId);\r\n\r\n        List<NamedEntityBean> wRetMap = new ArrayList<NamedEntityBean>();\r\n\r\n        ArrayList<Object[]> wRetVal = (ArrayList<Object[]>)wQuery.list();\r\n\r\n        if ((wRetVal != null) && (wRetVal.size() > 0))\r\n        {\r\n            NamedEntityBean n = null;\r\n            for (Object[] o : wRetVal) {\r\n                n = new NamedEntityBean();\r\n                n.setId((Long)o[0]);\r\n                n.setName((String)o[1]);\r\n                n.setPaySlipObjTypeInd(pObjType);\r\n                wRetMap.add(n);\r\n            }\r\n            Comparator<NamedEntityBean> c = Comparator.comparing(NamedEntityBean::getName);\r\n            Collections.sort(wRetMap,c);\r\n        }\r\n\r\n        return wRetMap;\r\n    }\r\n\r\n    public AbstractPaycheckEntity loadLastNoneZeroPaycheckForEmployee(BusinessCertificate businessCertificate, Long employeeInstId) {\r\n        AbstractPaycheckEntity wRetObj = IppmsUtils.makePaycheckObject(businessCertificate);\r\n        try\r\n        {\r\n//            List<Long> results = sessionFactory.getCurrentSession().createCriteria(EmployeePayBean.class).setProjection(Projections.max(\"id\"))\r\n//                    .add(Restrictions.eq(\"employee.id\", employeeInstId)).add(Restrictions.gt(\"netPay\", Double.valueOf(0.0D))).list();\r\n//\r\n            Long pid = this.getMaxPaycheckIdForEmployee(businessCertificate, employeeInstId);\r\n\r\n//            Long maxId =  pEmp.get(0);\r\n            String sql = \"select p.netPay,p.inducement,p.nhf,p.monthlyTax,p.id,p.payPeriodStart, p.runYear from \"+IppmsUtils.getPaycheckTableName(businessCertificate)+\" p where p.id = :pId\";\r\n            Query query = sessionFactory.getCurrentSession().createQuery(sql);\r\n            query.setParameter(\"pId\", pid);\r\n\r\n            Object[] wRetVal = (Object[]) query.uniqueResult();\r\n\r\n            wRetObj.setNetPay(((Double)wRetVal[0]).doubleValue());\r\n            wRetObj.setInducement(((Double)wRetVal[1]).doubleValue());\r\n            wRetObj.setNhf(((Double)wRetVal[2]).doubleValue());\r\n            wRetObj.setMonthlyTax(((Double)wRetVal[3]).doubleValue());\r\n            wRetObj.setId((Long)wRetVal[4]);\r\n            wRetObj.setPayDate((LocalDate) wRetVal[5]);\r\n            wRetObj.setRunYear((int)wRetVal[6]);\r\n        }\r\n        catch (Exception nPEx)\r\n        {\r\n            System.out.println(nPEx.getMessage());\r\n            return wRetObj;\r\n        }\r\n        return wRetObj;\r\n    }\r\n\r\n\r\n    public List<AbstractPaycheckEntity> loadEmployeePayBeanSummaryByParentIdAndLastPayPeriod(Long pBusClientId, int pRunYear, int pStartRow, int pEndRow, BusinessCertificate bc)\r\n    {\r\n        String wSql = \"select sum(p.taxesPaid), sum(p.taxableIncome), sum(p.totalPay), p.employee.id, e.employeeId ,e.firstName, e.lastName,\"\r\n                + \" e.initials, m.name\" +\r\n                \" from \"+IppmsUtils.getPaycheckTableName(bc)+\" p, \"+IppmsUtils.getEmployeeTableName(bc)+\" e, MdaDeptMap mdm, MdaInfo m\" +\r\n                \" where p.runYear = :pRunYearVar and e.id = p.employee.id and mdm.id = p.mdaDeptMap.id and m.id = mdm.mdaInfo.id\" +\r\n                \" group by p.employee.id, e.employeeId, e.firstName, e.lastName, e.initials, m.name \" +\r\n                \" order by p.employee.id\";\r\n\r\n        Query query = sessionFactory.getCurrentSession().createQuery(wSql);\r\n        query.setParameter(\"pRunYearVar\", pRunYear);\r\n\r\n        if (pStartRow > 0)\r\n        { query.setFirstResult(pStartRow);\r\n            query.setMaxResults(pEndRow);}\r\n        else{\r\n            query.setMaxResults(pEndRow);\r\n        }\r\n\r\n\r\n        ArrayList<Object[]> wRetVal = (ArrayList)query.list();\r\n        List<AbstractPaycheckEntity> wRetList = new ArrayList<AbstractPaycheckEntity>();\r\n\r\n\r\n        for (Object[] o : wRetVal) {\r\n            Long wEmpId = (Long)o[3];\r\n            EmployeePayBean p = new EmployeePayBean();\r\n            p.setEmpInstId(wEmpId);\r\n            p.setTaxPaidYTD((Double) o[0]);\r\n            p.setTaxableIncomeYTD((Double) o[1]);\r\n            p.setGrossPayYTD((Double) o[2]);\r\n            p.setEmployeeId((String) o[4]);\r\n            p.setEmployeeName(PayrollHRUtils.createDisplayName((String) o[6], (String) o[5], (String) o[7]));\r\n            //p.setMdaDeptMap(new MdaDeptMap((Long)o[8]));\r\n            p.setMda((String)o[8]);\r\n            wRetList.add(p);\r\n        }\r\n        return wRetList;\r\n    }\r\n\r\n    public int countEmployeePayBeanSummaryByParentIdAndLastPayPeriod(Long pBusClientId, int pRunYear, BusinessCertificate bc)\r\n    {\r\n        int wRetVal = 0;\r\n        String wSql = \"select count(distinct p.employee.id)\" +\r\n                \" from \"+IppmsUtils.getPaycheckTableName(bc)+\" p, \"+IppmsUtils.getEmployeeTableName(bc)+\" e\" +\r\n                \" where p.runYear = :pRunYearVar and e.id = p.employee.id\";\r\n\r\n        Query query = sessionFactory.getCurrentSession().createQuery(wSql);\r\n        query.setParameter(\"pRunYearVar\", pRunYear);\r\n\r\n        List results = query.list();\r\n        wRetVal = Integer.parseInt(String.valueOf(results.get(0)));\r\n\r\n        return wRetVal;\r\n    }\r\n\r\n\r\n\r\n    public List<MDAPPaySlipSummaryBean> getPayGroupPayslipSummaryByDates(int pRunMonth, int pRunYear, BusinessCertificate bc)\r\n    {\r\n        String hqlQuery = \"select count(p.id),sum(p.netPay), st.name,st.id, p.status from \" +\r\n                \" \"+IppmsUtils.getPaycheckTableName(bc)+\" p,SalaryInfo s, SalaryType st \" +\r\n                \"where p.salaryInfo.id = s.id and s.salaryType.id = st.id \" +\r\n                \"and p.runMonth = :pRunMonth \" +\r\n                \"and p.runYear = :pRunYear \" +\r\n                \"group by st.name, st.id, p.status order by st.name asc\";\r\n\r\n\r\n        Query query = sessionFactory.getCurrentSession().createQuery(hqlQuery);\r\n\r\n\r\n        query.setParameter(\"pRunMonth\", pRunMonth);\r\n        query.setParameter(\"pRunYear\", pRunYear);\r\n\r\n        List<Object[]> results = query.list();\r\n        List<MDAPPaySlipSummaryBean> wRetList = new ArrayList<>();\r\n\r\n        if ((results != null) && (results.size() > 0)) {\r\n            for (Object[] o : results) {\r\n                MDAPPaySlipSummaryBean m = new MDAPPaySlipSummaryBean();\r\n                m.setNoOfEmployees(((Long)o[0]).intValue());\r\n                m.setTotalPay(((Double)o[1]).doubleValue());\r\n                m.setName((String)o[2]);\r\n                m.setId((Long)o[3]);\r\n                m.setCheckStatus((String)o[4]);\r\n\r\n                wRetList.add(m);\r\n            }\r\n        }\r\n        return wRetList;\r\n    }\r\n\r\n    public List<PaycheckGarnishment> loadPaycheckGarnishmentsByPaycheckId(Long pPaycheckId, BusinessCertificate bc)\r\n    {\r\n        List wRetList = new ArrayList();\r\n        String wSql = \"select p.amount, e.description from \"+IppmsUtils.getPaycheckGarnishmentTableName(bc)+\" p, EmpGarnishmentInfo e,\"\r\n                + \" \"+IppmsUtils.getPaycheckTableName(bc)+\" epb where p.employeePayBean.id = epb.id and p.empGarnInfo.id = e.id and epb.id = :pParentId\";\r\n\r\n        Query query = sessionFactory.getCurrentSession().createQuery(wSql);\r\n\r\n        query.setParameter(\"pParentId\", pPaycheckId);\r\n\r\n        ArrayList<Object[]> wRetVal = (ArrayList<Object[]>)query.list();\r\n\r\n        if (wRetVal.size() > 0)\r\n        {\r\n            for (Object[] o : wRetVal) {\r\n                PaycheckGarnishment p = new PaycheckGarnishment();\r\n\r\n                p.setAmount(((Double)o[0]));\r\n                p.setName((String)o[1]);\r\n\r\n                wRetList.add(p);\r\n            }\r\n\r\n        }\r\n\r\n        return wRetList;\r\n    }\r\n\r\n    public List<PaycheckDeduction> loadPaycheckDeductionsByPaycheckId(Long pPaycheckId, BusinessCertificate bc)\r\n    {\r\n        List wRetList = new ArrayList();\r\n        String wSql = \"select p.amount, e.description \"\r\n                + \"from \"+IppmsUtils.getPaycheckDeductionTableName(bc)+\" p, EmpDeductionInfo e, \"+IppmsUtils.getPaycheckTableName(bc)+\" epb \"\r\n                + \"where p.employeePayBean.id = epb.id and p.empDedInfo.id = e.id and epb.id = :pParentId\";\r\n\r\n        Query query = sessionFactory.getCurrentSession().createQuery(wSql);\r\n\r\n        query.setLong(\"pParentId\", pPaycheckId);\r\n\r\n        ArrayList<Object[]> wRetVal = (ArrayList<Object[]>)query.list();\r\n\r\n        if (wRetVal.size() > 0)\r\n        {\r\n            for (Object[] o : wRetVal) {\r\n                PaycheckDeduction p = new PaycheckDeduction();\r\n\r\n                p.setAmount(((Double)o[0]));\r\n                p.setName((String)o[1]);\r\n\r\n                wRetList.add(p);\r\n            }\r\n        }\r\n        return wRetList;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/osm/gnl/ippms/ogsg/base/services/PaycheckService.java	(revision 6abb302a5f790d3180f86252c9617d25252ce2ee)
+++ src/main/java/com/osm/gnl/ippms/ogsg/base/services/PaycheckService.java	(date 1616000201288)
@@ -245,12 +245,7 @@
                 else {
                     e.setSchoolInfo(new SchoolInfo());
                 }
-                wObj = o[i++];
-                if (wObj != null)
-                    p.setAccountNumber((String) wObj);
-                else {
-                    p.setAccountNumber("N/A");
-                }
+                p.setAccountNumber((String)  o[i++]);
                 p.setBranchName((String) o[i++]);
 
                 p.setBranchSortCode((String) o[i++]);
